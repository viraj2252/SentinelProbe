"""Tests for the Vulnerability Scanner API endpoints."""  # noqa: D202

from sentinelprobe.vulnerability_scanner.models import (
    ScanStatus,
    ScanType,
    VulnerabilityResponse,
    VulnerabilityScanResponse,
    VulnerabilitySeverity,
    VulnerabilityStatus,
)


class TestVulnerabilityScannerAPI:
    """Tests for the Vulnerability Scanner API."""

    def test_create_scan(self, test_client, monkeypatch):
        """Test creating a vulnerability scan via API."""
        # Create a mock scan response
        mock_scan = VulnerabilityScanResponse(
            id=1,
            job_id=1,
            target_id=1,
            strategy_id=None,
            name="Test Scan",
            description="Test scan description",
            scan_type=ScanType.STANDARD,
            status=ScanStatus.PENDING,
            scanner_module="test_scanner",
            parameters={},
            scan_metadata={},
            start_time=None,
            end_time=None,
            created_at="2023-01-01T00:00:00",
            updated_at="2023-01-01T00:00:00",
        )

        # Patch the service method
        async def mock_create_scan(*args, **kwargs):
            return mock_scan

        monkeypatch.setattr(
            "sentinelprobe.vulnerability_scanner.service."
            "VulnerabilityScannerService.create_scan",
            mock_create_scan,
        )

        # Make API request
        response = test_client.post(
            "/vulnerability/scans",
            json={
                "job_id": 1,
                "target_id": 1,
                "name": "Test Scan",
                "description": "Test scan description",
                "scan_type": "standard",
                "scanner_module": "test_scanner",
                "parameters": {},
                "scan_metadata": {},
            },
        )

        # Assertions
        assert response.status_code == 201
        data = response.json()
        assert data["id"] == 1
        assert data["name"] == "Test Scan"
        assert data["status"] == "pending"

    def test_get_scan(self, test_client, monkeypatch):
        """Test getting a vulnerability scan via API."""
        # Create a mock scan response
        mock_scan = VulnerabilityScanResponse(
            id=1,
            job_id=1,
            target_id=1,
            strategy_id=None,
            name="Test Scan",
            description="Test scan description",
            scan_type=ScanType.STANDARD,
            status=ScanStatus.PENDING,
            scanner_module="test_scanner",
            parameters={},
            scan_metadata={},
            start_time=None,
            end_time=None,
            created_at="2023-01-01T00:00:00",
            updated_at="2023-01-01T00:00:00",
        )

        # Patch the service method
        async def mock_get_scan(*args, **kwargs):
            return mock_scan

        monkeypatch.setattr(
            "sentinelprobe.vulnerability_scanner.service."
            "VulnerabilityScannerService.get_scan",
            mock_get_scan,
        )

        # Make API request
        response = test_client.get("/vulnerability/scans/1")

        # Assertions
        assert response.status_code == 200
        data = response.json()
        assert data["id"] == 1
        assert data["name"] == "Test Scan"
        assert data["status"] == "pending"

    def test_get_scan_not_found(self, test_client, monkeypatch):
        """Test getting a non-existent vulnerability scan via API."""
        # Patch the service method
        async def mock_get_scan(*args, **kwargs):
            return None

        monkeypatch.setattr(
            "sentinelprobe.vulnerability_scanner.service."
            "VulnerabilityScannerService.get_scan",
            mock_get_scan,
        )

        # Make API request
        response = test_client.get("/vulnerability/scans/999")

        # Assertions
        assert response.status_code == 404
        assert "not found" in response.json()["detail"]

    def test_create_vulnerability(self, test_client, monkeypatch):
        """Test creating a vulnerability via API."""
        # Create a mock vulnerability response
        mock_vulnerability = VulnerabilityResponse(
            id=1,
            scan_id=1,
            target_id=1,
            name="Test Vulnerability",
            description="Test vulnerability description",
            severity=VulnerabilitySeverity.HIGH,
            status=VulnerabilityStatus.UNCONFIRMED,
            cve_id=None,
            cvss_score=None,
            affected_component="Test Component",
            port_number=None,
            protocol=None,
            details={},
            remediation=None,
            created_at="2023-01-01T00:00:00",
            updated_at="2023-01-01T00:00:00",
        )

        # Patch the service methods
        async def mock_get_scan(*args, **kwargs):
            return {"id": 1, "name": "Test Scan"}

        async def mock_create_vulnerability(*args, **kwargs):
            return mock_vulnerability

        monkeypatch.setattr(
            "sentinelprobe.vulnerability_scanner.service."
            "VulnerabilityScannerService.get_scan",
            mock_get_scan,
        )

        monkeypatch.setattr(
            "sentinelprobe.vulnerability_scanner.repository."
            "VulnerabilityRepository.create_vulnerability",
            mock_create_vulnerability,
        )

        # Make API request
        response = test_client.post(
            "/vulnerability/vulnerabilities",
            json={
                "scan_id": 1,
                "target_id": 1,
                "name": "Test Vulnerability",
                "description": "Test vulnerability description",
                "severity": "high",
                "affected_component": "Test Component",
            },
        )

        # Assertions
        assert response.status_code == 201
        data = response.json()
        assert data["id"] == 1
        assert data["name"] == "Test Vulnerability"
        assert data["severity"] == "high"
        assert data["status"] == "unconfirmed"

    def test_get_scan_vulnerabilities(self, test_client, monkeypatch):
        """Test getting vulnerabilities for a scan via API."""
        # Create mock vulnerability responses
        mock_vulnerabilities = [
            VulnerabilityResponse(
                id=1,
                scan_id=1,
                target_id=1,
                name="Test Vulnerability 1",
                description="Test vulnerability description 1",
                severity=VulnerabilitySeverity.HIGH,
                status=VulnerabilityStatus.UNCONFIRMED,
                cve_id=None,
                cvss_score=None,
                affected_component="Test Component 1",
                port_number=None,
                protocol=None,
                details={},
                remediation=None,
                created_at="2023-01-01T00:00:00",
                updated_at="2023-01-01T00:00:00",
            ),
            VulnerabilityResponse(
                id=2,
                scan_id=1,
                target_id=1,
                name="Test Vulnerability 2",
                description="Test vulnerability description 2",
                severity=VulnerabilitySeverity.MEDIUM,
                status=VulnerabilityStatus.UNCONFIRMED,
                cve_id=None,
                cvss_score=None,
                affected_component="Test Component 2",
                port_number=None,
                protocol=None,
                details={},
                remediation=None,
                created_at="2023-01-01T00:00:00",
                updated_at="2023-01-01T00:00:00",
            ),
        ]

        # Patch the service method
        async def mock_get_scan_vulnerabilities(*args, **kwargs):
            return mock_vulnerabilities

        monkeypatch.setattr(
            "sentinelprobe.vulnerability_scanner.service."
            "VulnerabilityScannerService.get_scan_vulnerabilities",
            mock_get_scan_vulnerabilities,
        )

        # Make API request
        response = test_client.get("/vulnerability/scans/1/vulnerabilities")

        # Assertions
        assert response.status_code == 200
        data = response.json()
        assert len(data) == 2
        assert data[0]["id"] == 1
        assert data[0]["name"] == "Test Vulnerability 1"
        assert data[1]["id"] == 2
        assert data[1]["name"] == "Test Vulnerability 2"
