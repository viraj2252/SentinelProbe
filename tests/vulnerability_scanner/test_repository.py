"""Tests for the Vulnerability Scanner repository."""

import pytest

from sentinelprobe.vulnerability_scanner.models import (
    ScanStatus,
    ScanType,
    VulnerabilityCreate,
    VulnerabilityScanCreate,
    VulnerabilitySeverity,
    VulnerabilityStatus,
    VulnerabilityUpdate,
)
from sentinelprobe.vulnerability_scanner.repository import (
    VulnerabilityRepository,
    VulnerabilityScanRepository,
)


class TestVulnerabilityScanRepository:
    """Tests for the VulnerabilityScanRepository."""

    @pytest.mark.asyncio
    async def test_create_scan(self, test_db_session):
        """Test creating a vulnerability scan."""
        repo = VulnerabilityScanRepository(test_db_session)
        scan_data = VulnerabilityScanCreate(
            job_id=1,
            target_id=1,
            name="Test Scan",
            description="Test scan description",
            scan_type=ScanType.NETWORK,
            scanner_module="test_scanner",
        )

        scan = await repo.create_scan(scan_data)

        assert scan.id is not None
        assert scan.job_id == 1
        assert scan.target_id == 1
        assert scan.name == "Test Scan"
        assert scan.description == "Test scan description"
        assert scan.scan_type == ScanType.NETWORK
        assert scan.status == ScanStatus.PENDING
        assert scan.scanner_module == "test_scanner"
        assert scan.parameters == {}
        assert scan.scan_metadata == {}

    @pytest.mark.asyncio
    async def test_get_scan(self, test_db_session, mock_vulnerability_scan):
        """Test getting a vulnerability scan by ID."""
        repo = VulnerabilityScanRepository(test_db_session)
        scan = await repo.get_scan(mock_vulnerability_scan.id)

        assert scan is not None
        assert scan.id == mock_vulnerability_scan.id
        assert scan.name == mock_vulnerability_scan.name
        assert scan.status == mock_vulnerability_scan.status

    @pytest.mark.asyncio
    async def test_get_scans_by_job(self, test_db_session, mock_vulnerability_scan):
        """Test getting vulnerability scans by job ID."""
        repo = VulnerabilityScanRepository(test_db_session)
        scans = await repo.get_scans_by_job(mock_vulnerability_scan.job_id)

        assert len(scans) == 1
        assert scans[0].id == mock_vulnerability_scan.id
        assert scans[0].job_id == mock_vulnerability_scan.job_id

    @pytest.mark.asyncio
    async def test_get_scans_by_target(self, test_db_session, mock_vulnerability_scan):
        """Test getting vulnerability scans by target ID."""
        repo = VulnerabilityScanRepository(test_db_session)
        scans = await repo.get_scans_by_target(mock_vulnerability_scan.target_id)

        assert len(scans) == 1
        assert scans[0].id == mock_vulnerability_scan.id
        assert scans[0].target_id == mock_vulnerability_scan.target_id

    @pytest.mark.asyncio
    async def test_update_scan_status(self, test_db_session, mock_vulnerability_scan):
        """Test updating a vulnerability scan status."""
        repo = VulnerabilityScanRepository(test_db_session)
        updated_scan = await repo.update_scan_status(
            mock_vulnerability_scan.id, ScanStatus.RUNNING
        )

        assert updated_scan is not None
        assert updated_scan.status == ScanStatus.RUNNING


class TestVulnerabilityRepository:
    """Tests for the VulnerabilityRepository."""

    @pytest.mark.asyncio
    async def test_create_vulnerability(self, test_db_session, mock_vulnerability_scan):
        """Test creating a vulnerability."""
        repo = VulnerabilityRepository(test_db_session)
        vulnerability_data = VulnerabilityCreate(
            scan_id=mock_vulnerability_scan.id,
            target_id=1,
            name="Test Vulnerability",
            description="Test vulnerability description",
            severity=VulnerabilitySeverity.HIGH,
            affected_component="Test Component",
        )

        vulnerability = await repo.create_vulnerability(vulnerability_data)

        assert vulnerability.id is not None
        assert vulnerability.scan_id == mock_vulnerability_scan.id
        assert vulnerability.target_id == 1
        assert vulnerability.name == "Test Vulnerability"
        assert vulnerability.description == "Test vulnerability description"
        assert vulnerability.severity == VulnerabilitySeverity.HIGH
        assert vulnerability.status == VulnerabilityStatus.UNCONFIRMED
        assert vulnerability.affected_component == "Test Component"
        assert vulnerability.details == {}

    @pytest.mark.asyncio
    async def test_get_vulnerability(self, test_db_session, mock_vulnerability):
        """Test getting a vulnerability by ID."""
        repo = VulnerabilityRepository(test_db_session)
        vulnerability = await repo.get_vulnerability(mock_vulnerability.id)

        assert vulnerability is not None
        assert vulnerability.id == mock_vulnerability.id
        assert vulnerability.name == mock_vulnerability.name
        assert vulnerability.severity == mock_vulnerability.severity

    @pytest.mark.asyncio
    async def test_get_vulnerabilities_by_scan(
        self, test_db_session, mock_vulnerability, mock_vulnerability_scan
    ):
        """Test getting vulnerabilities by scan ID."""
        repo = VulnerabilityRepository(test_db_session)
        vulnerabilities = await repo.get_vulnerabilities_by_scan(
            mock_vulnerability_scan.id
        )

        assert len(vulnerabilities) == 1
        assert vulnerabilities[0].id == mock_vulnerability.id
        assert vulnerabilities[0].scan_id == mock_vulnerability_scan.id

    @pytest.mark.asyncio
    async def test_get_vulnerabilities_by_target(
        self, test_db_session, mock_vulnerability
    ):
        """Test getting vulnerabilities by target ID."""
        repo = VulnerabilityRepository(test_db_session)
        vulnerabilities = await repo.get_vulnerabilities_by_target(
            mock_vulnerability.target_id
        )

        assert len(vulnerabilities) == 1
        assert vulnerabilities[0].id == mock_vulnerability.id
        assert vulnerabilities[0].target_id == mock_vulnerability.target_id

    @pytest.mark.asyncio
    async def test_update_vulnerability(self, test_db_session, mock_vulnerability):
        """Test updating a vulnerability."""
        repo = VulnerabilityRepository(test_db_session)
        update_data = VulnerabilityUpdate(
            status=VulnerabilityStatus.CONFIRMED,
            severity=VulnerabilitySeverity.CRITICAL,
            description="Updated description",
        )

        updated_vulnerability = await repo.update_vulnerability(
            mock_vulnerability.id, update_data
        )

        assert updated_vulnerability is not None
        assert updated_vulnerability.status == VulnerabilityStatus.CONFIRMED
        assert updated_vulnerability.severity == VulnerabilitySeverity.CRITICAL
        assert updated_vulnerability.description == "Updated description"
