"""Tests for vulnerability scanner plugins."""

from unittest.mock import AsyncMock, MagicMock, patch

import pytest
from sqlalchemy.ext.asyncio import AsyncSession

from sentinelprobe.reconnaissance.models import Service, ServiceType
from sentinelprobe.vulnerability_scanner.models import (
    VulnerabilityCreate,
    VulnerabilityScan,
    VulnerabilitySeverity,
)
from sentinelprobe.vulnerability_scanner.plugins.http_scanner import HttpScanner
from sentinelprobe.vulnerability_scanner.plugins.mysql_scanner import MySqlScanner
from sentinelprobe.vulnerability_scanner.plugins.redis_scanner import RedisScanner
from sentinelprobe.vulnerability_scanner.plugins.ssh_scanner import SshScanner
from sentinelprobe.vulnerability_scanner.scanner_plugin import ScannerPlugin


@pytest.fixture
def mock_session():
    """Create a mock database session."""
    return AsyncMock(spec=AsyncSession)


@pytest.fixture
def mock_scan():
    """Create a mock vulnerability scan."""
    return MagicMock(
        spec=VulnerabilityScan,
        id=1,
        job_id=1,
        target_id=1,
        name="Test Scan",
        description="Test scan description",
    )


@pytest.fixture
def mock_http_service():
    """Create a mock HTTP service."""
    port_mock = MagicMock(target_id=1, port_number=80, protocol="tcp")
    service = MagicMock(
        spec=Service,
        id=1,
        port_id=1,
        port=port_mock,
        service_type=ServiceType.HTTP,
        name="http",
        version="Apache/2.4.29",
        protocol="tcp",
        metadata={
            "banner": "Apache/2.4.29 (Ubuntu)",
            "version": "2.4.29",
            "headers": {
                "Server": "Apache/2.4.29 (Ubuntu)",
                "X-Powered-By": "PHP/7.2.24",
            },
        },
    )
    # Add port number as a property
    service.port = 80
    return service


@pytest.fixture
def mock_ssh_service():
    """Create a mock SSH service."""
    port_mock = MagicMock(target_id=1, port_number=22, protocol="tcp")
    service = MagicMock(
        spec=Service,
        id=2,
        port_id=2,
        port=port_mock,
        service_type=ServiceType.SSH,
        name="ssh",
        version="OpenSSH 7.6p1",
        protocol="tcp",
        metadata={
            "banner": "SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.5",
            "version": "7.6p1",
            "algorithms": {
                "encryption": ["aes128-ctr", "aes192-ctr", "aes256-ctr", "aes128-cbc"],
                "kex": [
                    "curve25519-sha256",
                    "diffie-hellman-group14-sha1",
                    "diffie-hellman-group1-sha1",
                ],
                "mac": ["hmac-sha2-256", "hmac-sha1"],
            },
            "config": {
                "password_authentication": "yes",
                "permit_root_login": "yes",
            },
        },
    )
    # Add port number as a property
    service.port = 22
    return service


@pytest.fixture
def mock_mysql_service():
    """Create a mock MySQL service."""
    port_mock = MagicMock(target_id=1, port_number=3306, protocol="tcp")
    service = MagicMock(
        spec=Service,
        id=3,
        port_id=3,
        port=port_mock,
        service_type=ServiceType.MYSQL,
        name="mysql",
        version="5.7.32",
        protocol="tcp",
        metadata={
            "banner": "5.7.32-0ubuntu0.18.04.1",
            "version": "5.7.32",
            "binding": "0.0.0.0",
            "auth_method": "mysql_native_password",
            "has_anonymous_users": True,
            "has_empty_passwords": False,
            "config": {
                "local_infile": True,
                "secure_file_priv": "",
                "log_error": "",
            },
        },
    )
    # Add port number as a property
    service.port = 3306
    return service


@pytest.mark.asyncio
async def test_http_scanner(mock_session, mock_scan, mock_http_service):
    """Test the HTTP scanner plugin."""
    # Create a mock for the service repository
    mock_service_repo = AsyncMock()
    mock_service_repo.get_services_by_target_and_type = AsyncMock(
        return_value=[mock_http_service]
    )

    # Create the scanner and replace its service repository
    scanner = HttpScanner(mock_session)
    scanner.service_repository = mock_service_repo

    # Run the scan
    results = await scanner.scan(mock_scan, 1, {})

    # Verify the results
    assert len(results) > 0
    assert any(v.name == "Information Disclosure" for v in results)
    assert any(v.severity == VulnerabilitySeverity.MEDIUM for v in results)
    assert any(v.affected_component == "web-server:80" for v in results)

    # Verify service repository was called correctly
    mock_service_repo.get_services_by_target_and_type.assert_called_once_with(
        target_id=1, service_type=ServiceType.HTTP
    )


@pytest.mark.asyncio
async def test_ssh_scanner(mock_session, mock_scan, mock_ssh_service):
    """Test the SSH scanner plugin."""
    # Create a mock for the service repository
    mock_service_repo = AsyncMock()
    mock_service_repo.get_services_by_target_and_type = AsyncMock(
        return_value=[mock_ssh_service]
    )

    # Create the scanner and replace its service repository
    scanner = SshScanner(mock_session)
    scanner.service_repository = mock_service_repo

    # Run the scan
    results = await scanner.scan(mock_scan, 1, {})

    # Verify the results
    assert len(results) > 0
    assert any(v.name == "Weak SSH Ciphers/Algorithms" for v in results)
    assert any(v.name == "Password Authentication Enabled" for v in results)
    assert any(v.name == "Root Login Permitted" for v in results)
    assert any(v.severity == VulnerabilitySeverity.HIGH for v in results)
    assert any(v.affected_component == "ssh-server:22" for v in results)

    # Verify service repository was called correctly
    mock_service_repo.get_services_by_target_and_type.assert_called_once_with(
        target_id=1, service_type=ServiceType.SSH
    )


@pytest.mark.asyncio
async def test_mysql_scanner(mock_session, mock_scan, mock_mysql_service):
    """Test the MySQL scanner plugin."""
    # Create a mock for the service repository
    mock_service_repo = AsyncMock()
    mock_service_repo.get_services_by_target_and_type = AsyncMock(
        return_value=[mock_mysql_service]
    )

    # Create the scanner and replace its service repository
    scanner = MySqlScanner(mock_session)
    scanner.service_repository = mock_service_repo

    # Run the scan
    results = await scanner.scan(mock_scan, 1, {})

    # Verify the results
    assert len(results) > 0
    assert any(v.name == "Publicly Exposed MySQL Server" for v in results)
    assert any(v.name == "Default MySQL Credentials" for v in results)
    assert any(v.name == "Insecure MySQL Configuration" for v in results)
    assert any(v.severity == VulnerabilitySeverity.CRITICAL for v in results)
    assert any(v.affected_component == "mysql-server:3306" for v in results)

    # Verify service repository was called correctly
    mock_service_repo.get_services_by_target_and_type.assert_called_once_with(
        target_id=1, service_type=ServiceType.MYSQL
    )


@pytest.mark.asyncio
async def test_service_registration(mock_session):
    """Test that the scanner plugins are properly registered in the service."""
    from sentinelprobe.vulnerability_scanner.plugins.http_scanner import HttpScanner
    from sentinelprobe.vulnerability_scanner.plugins.mongodb_scanner import (
        MongoDBScanner,
    )
    from sentinelprobe.vulnerability_scanner.plugins.mysql_scanner import MySqlScanner
    from sentinelprobe.vulnerability_scanner.plugins.redis_scanner import RedisScanner
    from sentinelprobe.vulnerability_scanner.plugins.ssh_scanner import SshScanner
    from sentinelprobe.vulnerability_scanner.service import VulnerabilityScannerService

    # Create the service
    service = VulnerabilityScannerService(mock_session)

    # Check that our plugins are registered
    assert "http_scanner" in service.SCANNER_PLUGINS
    assert "ssh_scanner" in service.SCANNER_PLUGINS
    assert "mysql_scanner" in service.SCANNER_PLUGINS
    assert "redis_scanner" in service.SCANNER_PLUGINS
    assert "mongodb_scanner" in service.SCANNER_PLUGINS
    assert "basic_scanner" in service.SCANNER_PLUGINS

    # Verify we can get the plugins
    http_plugin = await service.get_scanner_plugin("http_scanner")
    ssh_plugin = await service.get_scanner_plugin("ssh_scanner")
    mysql_plugin = await service.get_scanner_plugin("mysql_scanner")
    redis_plugin = await service.get_scanner_plugin("redis_scanner")
    mongodb_plugin = await service.get_scanner_plugin("mongodb_scanner")
    basic_plugin = await service.get_scanner_plugin("basic_scanner")

    assert http_plugin == HttpScanner
    assert ssh_plugin == SshScanner
    assert mysql_plugin == MySqlScanner
    assert redis_plugin == RedisScanner
    assert mongodb_plugin == MongoDBScanner
    assert basic_plugin is not None
