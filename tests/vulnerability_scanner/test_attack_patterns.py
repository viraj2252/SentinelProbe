"""Tests for attack pattern database integration."""

import pytest
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from sentinelprobe.vulnerability_scanner.attack_pattern_repository import (
    AttackPatternRepository,
)
from sentinelprobe.vulnerability_scanner.attack_patterns import (
    AttackPattern,
    AttackPatternCreate,
    AttackType,
    AttackVector,
    VulnerabilityAttackPatternMapping,
    VulnerabilityAttackPatternMappingCreate,
)
from sentinelprobe.vulnerability_scanner.models import (
    Vulnerability,
    VulnerabilityCreate,
    VulnerabilitySeverity,
    VulnerabilityStatus,
)
from sentinelprobe.vulnerability_scanner.repository import VulnerabilityRepository


@pytest.mark.asyncio
class TestAttackPatternRepository:
    """Tests for the AttackPatternRepository."""

    async def test_create_attack_pattern(self, test_db_session: AsyncSession):
        """Test creating an attack pattern."""
        # Set up repository
        repo = AttackPatternRepository(test_db_session)

        # Create test data
        pattern_data = AttackPatternCreate(
            name="SQL Injection",
            description="SQL injection attack pattern",
            attack_type=AttackType.INJECTION,
            attack_vector=AttackVector.WEB,
            typical_severity=VulnerabilitySeverity.HIGH,
            mitre_id="T1190",
            capec_id="CAPEC-66",
            cwe_ids=["CWE-89"],
            pattern_details={"query_params": True, "body_params": True},
            pattern_indicators={
                "input_validation": False,
                "parameterized_queries": False,
            },
            detection_guidance="Monitor SQL error messages",
            remediation_guidance="Use parameterized queries",
        )

        # Create attack pattern
        pattern = await repo.create_attack_pattern(pattern_data)

        # Verify pattern was created with correct data
        assert pattern.id is not None
        assert pattern.name == "SQL Injection"
        assert pattern.attack_type == AttackType.INJECTION
        assert pattern.attack_vector == AttackVector.WEB
        assert pattern.typical_severity == VulnerabilitySeverity.HIGH
        assert pattern.mitre_id == "T1190"
        assert pattern.capec_id == "CAPEC-66"
        assert pattern.cwe_ids == ["CWE-89"]
        assert pattern.pattern_details == {"query_params": True, "body_params": True}
        assert pattern.pattern_indicators == {
            "input_validation": False,
            "parameterized_queries": False,
        }
        assert pattern.detection_guidance == "Monitor SQL error messages"
        assert pattern.remediation_guidance == "Use parameterized queries"

    async def test_get_attack_pattern(self, test_db_session: AsyncSession):
        """Test getting an attack pattern by ID."""
        # Set up repository
        repo = AttackPatternRepository(test_db_session)

        # Create test data
        pattern_data = AttackPatternCreate(
            name="XSS",
            description="Cross-site scripting attack pattern",
            attack_type=AttackType.XSS,
            attack_vector=AttackVector.WEB,
            typical_severity=VulnerabilitySeverity.MEDIUM,
            cwe_ids=["CWE-79"],
        )

        # Create attack pattern
        pattern = await repo.create_attack_pattern(pattern_data)

        # Get the attack pattern
        retrieved_pattern = await repo.get_attack_pattern(pattern.id)

        # Verify pattern was retrieved correctly
        assert retrieved_pattern is not None
        assert retrieved_pattern.id == pattern.id
        assert retrieved_pattern.name == "XSS"
        assert retrieved_pattern.attack_type == AttackType.XSS

    async def test_update_attack_pattern(self, test_db_session: AsyncSession):
        """Test updating an attack pattern."""
        # Set up repository
        repo = AttackPatternRepository(test_db_session)

        # Create test data
        pattern_data = AttackPatternCreate(
            name="CSRF",
            description="Cross-site request forgery attack",
            attack_type=AttackType.AUTHENTICATION,
            attack_vector=AttackVector.WEB,
            typical_severity=VulnerabilitySeverity.MEDIUM,
            cwe_ids=["CWE-352"],
        )

        # Create attack pattern
        pattern = await repo.create_attack_pattern(pattern_data)

        # Update the attack pattern
        updated_pattern = await repo.update_attack_pattern(
            pattern.id,
            AttackPatternCreate(
                name="CSRF",
                description="Updated description",
                attack_type=AttackType.AUTHENTICATION,
                attack_vector=AttackVector.WEB,
                typical_severity=VulnerabilitySeverity.HIGH,  # Changed severity
                cwe_ids=["CWE-352"],
                mitre_id="T1234",  # Added MITRE ID
            ),
        )

        # Verify pattern was updated correctly
        assert updated_pattern is not None
        assert updated_pattern.id == pattern.id
        assert updated_pattern.description == "Updated description"
        assert updated_pattern.typical_severity == VulnerabilitySeverity.HIGH
        assert updated_pattern.mitre_id == "T1234"

    async def test_delete_attack_pattern(self, test_db_session: AsyncSession):
        """Test deleting an attack pattern."""
        # Set up repository
        repo = AttackPatternRepository(test_db_session)

        # Create test data
        pattern_data = AttackPatternCreate(
            name="Path Traversal",
            description="Path traversal attack",
            attack_type=AttackType.AUTHENTICATION,
            attack_vector=AttackVector.WEB,
            typical_severity=VulnerabilitySeverity.HIGH,
            cwe_ids=["CWE-22"],
        )

        # Create attack pattern
        pattern = await repo.create_attack_pattern(pattern_data)

        # Delete the attack pattern
        success = await repo.delete_attack_pattern(pattern.id)

        # Verify deletion was successful
        assert success is True

        # Verify pattern is no longer retrievable
        deleted_pattern = await repo.get_attack_pattern(pattern.id)
        assert deleted_pattern is None

    async def test_create_vulnerability_attack_pattern_mapping(
        self, test_db_session: AsyncSession
    ):
        """Test creating a mapping between a vulnerability and an attack pattern."""
        # Set up repositories
        ap_repo = AttackPatternRepository(test_db_session)
        vuln_repo = VulnerabilityRepository(test_db_session)

        # Create an attack pattern
        pattern_data = AttackPatternCreate(
            name="SQL Injection",
            description="SQL injection attack pattern",
            attack_type=AttackType.INJECTION,
            attack_vector=AttackVector.WEB,
            typical_severity=VulnerabilitySeverity.HIGH,
            cwe_ids=["CWE-89"],
        )
        pattern = await ap_repo.create_attack_pattern(pattern_data)

        # Create a vulnerability
        vuln_data = VulnerabilityCreate(
            scan_id=1,  # Assuming this exists in the test DB
            target_id=1,  # Assuming this exists in the test DB
            name="SQL Injection in login",
            description="SQL injection vulnerability in login page",
            severity=VulnerabilitySeverity.HIGH,
            affected_component="Login Module",
            details={"cwe_id": "CWE-89"},
        )
        vulnerability = await vuln_repo.create_vulnerability(vuln_data)

        # Create mapping
        mapping_data = VulnerabilityAttackPatternMappingCreate(
            vulnerability_id=vulnerability.id,
            attack_pattern_id=pattern.id,
            match_confidence=95.0,
            match_details={"matched_on": "CWE-89"},
        )
        mapping = await ap_repo.create_vulnerability_attack_pattern_mapping(
            mapping_data
        )

        # Verify mapping was created with correct data
        assert mapping.id is not None
        assert mapping.vulnerability_id == vulnerability.id
        assert mapping.attack_pattern_id == pattern.id
        assert mapping.match_confidence == 95.0
        assert mapping.match_details == {"matched_on": "CWE-89"}

    async def test_get_vulnerability_attack_patterns(
        self, test_db_session: AsyncSession
    ):
        """Test getting attack patterns associated with a vulnerability."""
        # Set up repositories
        ap_repo = AttackPatternRepository(test_db_session)
        vuln_repo = VulnerabilityRepository(test_db_session)

        # Create an attack pattern
        pattern_data = AttackPatternCreate(
            name="SQL Injection",
            description="SQL injection attack pattern",
            attack_type=AttackType.INJECTION,
            attack_vector=AttackVector.WEB,
            typical_severity=VulnerabilitySeverity.HIGH,
            cwe_ids=["CWE-89"],
        )
        pattern = await ap_repo.create_attack_pattern(pattern_data)

        # Create another attack pattern
        pattern2_data = AttackPatternCreate(
            name="Blind SQL Injection",
            description="Blind SQL injection attack pattern",
            attack_type=AttackType.INJECTION,
            attack_vector=AttackVector.WEB,
            typical_severity=VulnerabilitySeverity.HIGH,
            cwe_ids=["CWE-89"],
        )
        pattern2 = await ap_repo.create_attack_pattern(pattern2_data)

        # Create a vulnerability
        vuln_data = VulnerabilityCreate(
            scan_id=1,  # Assuming this exists in the test DB
            target_id=1,  # Assuming this exists in the test DB
            name="SQL Injection in login",
            description="SQL injection vulnerability in login page",
            severity=VulnerabilitySeverity.HIGH,
            affected_component="Login Module",
            details={"cwe_id": "CWE-89"},
        )
        vulnerability = await vuln_repo.create_vulnerability(vuln_data)

        # Create mappings
        mapping1_data = VulnerabilityAttackPatternMappingCreate(
            vulnerability_id=vulnerability.id,
            attack_pattern_id=pattern.id,
            match_confidence=95.0,
        )
        mapping2_data = VulnerabilityAttackPatternMappingCreate(
            vulnerability_id=vulnerability.id,
            attack_pattern_id=pattern2.id,
            match_confidence=80.0,
        )
        await ap_repo.create_vulnerability_attack_pattern_mapping(mapping1_data)
        await ap_repo.create_vulnerability_attack_pattern_mapping(mapping2_data)

        # Get attack patterns for the vulnerability
        patterns = await ap_repo.get_vulnerability_attack_patterns(vulnerability.id)

        # Verify we got both patterns
        assert len(patterns) == 2
        pattern_ids = [p[0].id for p in patterns]
        confidences = [p[1] for p in patterns]
        assert pattern.id in pattern_ids
        assert pattern2.id in pattern_ids
        assert 95.0 in confidences
        assert 80.0 in confidences

    async def test_match_vulnerability_to_attack_patterns(
        self, test_db_session: AsyncSession
    ):
        """Test matching a vulnerability to attack patterns."""
        # Set up repositories
        ap_repo = AttackPatternRepository(test_db_session)
        vuln_repo = VulnerabilityRepository(test_db_session)

        # Create attack patterns
        pattern1_data = AttackPatternCreate(
            name="SQL Injection",
            description="SQL injection attack pattern",
            attack_type=AttackType.INJECTION,
            attack_vector=AttackVector.WEB,
            typical_severity=VulnerabilitySeverity.HIGH,
            cwe_ids=["CWE-89"],
            pattern_indicators={"input_validation": False},
        )
        pattern2_data = AttackPatternCreate(
            name="XSS",
            description="Cross-site scripting attack pattern",
            attack_type=AttackType.XSS,
            attack_vector=AttackVector.WEB,
            typical_severity=VulnerabilitySeverity.MEDIUM,
            cwe_ids=["CWE-79"],
        )
        await ap_repo.create_attack_pattern(pattern1_data)
        await ap_repo.create_attack_pattern(pattern2_data)

        # Create a vulnerability
        vuln_data = VulnerabilityCreate(
            scan_id=1,  # Assuming this exists in the test DB
            target_id=1,  # Assuming this exists in the test DB
            name="SQL Injection in login",
            description="SQL injection vulnerability in login page",
            severity=VulnerabilitySeverity.HIGH,
            affected_component="Login Module",
            details={"cwe_id": "CWE-89", "input_validation": False},
        )
        vulnerability = await vuln_repo.create_vulnerability(vuln_data)

        # Match vulnerability to attack patterns
        matched_patterns = await ap_repo.match_vulnerability_to_attack_patterns(
            vulnerability
        )

        # Verify matches
        assert len(matched_patterns) > 0
        # The SQL Injection pattern should have a higher confidence than XSS
        sql_injection_match = next(
            (p for p in matched_patterns if p[0].name == "SQL Injection"), None
        )
        assert sql_injection_match is not None
        assert sql_injection_match[1] > 50  # Confidence should be significant
