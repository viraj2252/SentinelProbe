"""Tests for the Redis Scanner plugin."""

from unittest.mock import AsyncMock, MagicMock

import pytest

from sentinelprobe.reconnaissance.models import Port, ServiceType
from sentinelprobe.vulnerability_scanner.models import (
    VulnerabilityCreate,
    VulnerabilityScan,
    VulnerabilitySeverity,
)
from sentinelprobe.vulnerability_scanner.plugins.redis_scanner import RedisScanner


@pytest.fixture
def mock_session():
    """Create a mock session for testing."""
    return MagicMock()


@pytest.fixture
def redis_scanner(mock_session):
    """Create a Redis scanner for testing."""
    scanner = RedisScanner(mock_session)
    scanner.service_repository.get_services_by_target_and_type = AsyncMock()
    return scanner


@pytest.fixture
def mock_scan():
    """Create a mock scan for testing."""
    scan = MagicMock(spec=VulnerabilityScan)
    scan.id = 1
    return scan


@pytest.fixture
def mock_service():
    """Create a mock Redis service for testing."""
    service = MagicMock()
    service.id = 1
    service.port = MagicMock(spec=Port)
    service.port.port_number = 6379
    service.port.protocol = "tcp"
    service.port.id = 1
    service.service_type = ServiceType.REDIS
    service.version = "5.0.7"
    service.service_metadata = {}
    return service


@pytest.mark.asyncio
async def test_scan_no_services(redis_scanner, mock_scan):
    """Test scanning with no Redis services."""
    # Arrange
    redis_scanner.service_repository.get_services_by_target_and_type.return_value = []

    # Act
    vulnerabilities = await redis_scanner.scan(mock_scan, 1, {})

    # Assert
    assert len(vulnerabilities) == 0
    redis_scanner.service_repository.get_services_by_target_and_type.assert_called_once_with(
        target_id=1, service_type=ServiceType.REDIS
    )


@pytest.mark.asyncio
async def test_scan_outdated_version(redis_scanner, mock_scan, mock_service):
    """Test scanning an outdated Redis version."""
    # Arrange
    mock_service.version = "4.0.14"
    redis_scanner.service_repository.get_services_by_target_and_type.return_value = [
        mock_service
    ]

    # Act
    vulnerabilities = await redis_scanner.scan(mock_scan, 1, {})

    # Assert
    assert len(vulnerabilities) > 0
    assert any(
        v.name == "Outdated Redis Version" and v.severity == VulnerabilitySeverity.HIGH
        for v in vulnerabilities
    )


@pytest.mark.asyncio
async def test_scan_missing_authentication(redis_scanner, mock_scan, mock_service):
    """Test scanning Redis with missing authentication."""
    # Arrange
    mock_service.service_metadata = {"auth_status": "none"}
    redis_scanner.service_repository.get_services_by_target_and_type.return_value = [
        mock_service
    ]

    # Act
    vulnerabilities = await redis_scanner.scan(mock_scan, 1, {})

    # Assert
    assert len(vulnerabilities) > 0
    assert any(
        v.name == "Redis Without Authentication"
        and v.severity == VulnerabilitySeverity.CRITICAL
        for v in vulnerabilities
    )


@pytest.mark.asyncio
async def test_scan_public_exposure(redis_scanner, mock_scan, mock_service):
    """Test scanning publicly exposed Redis."""
    # Arrange
    mock_service.service_metadata = {"binding": "0.0.0.0"}
    redis_scanner.service_repository.get_services_by_target_and_type.return_value = [
        mock_service
    ]

    # Act
    vulnerabilities = await redis_scanner.scan(mock_scan, 1, {})

    # Assert
    assert len(vulnerabilities) > 0
    assert any(
        v.name == "Redis Exposed to Public Internet"
        and v.severity == VulnerabilitySeverity.CRITICAL
        for v in vulnerabilities
    )


@pytest.mark.asyncio
async def test_scan_insecure_configuration(redis_scanner, mock_scan, mock_service):
    """Test scanning Redis with insecure configuration."""
    # Arrange
    mock_service.service_metadata = {
        "config": {
            "protected-mode": "no",
            "timeout": "0",
            "maxmemory": "0",
        }
    }
    redis_scanner.service_repository.get_services_by_target_and_type.return_value = [
        mock_service
    ]

    # Act
    vulnerabilities = await redis_scanner.scan(mock_scan, 1, {})

    # Assert
    assert len(vulnerabilities) > 0
    assert any(
        v.name == "Insecure Redis Configuration"
        and v.severity == VulnerabilitySeverity.HIGH
        for v in vulnerabilities
    )


@pytest.mark.asyncio
async def test_scan_secure_configuration(redis_scanner, mock_scan, mock_service):
    """Test scanning Redis with secure configuration."""
    # Arrange
    mock_service.version = "7.0.5"  # Latest version
    mock_service.service_metadata = {
        "config": {
            "protected-mode": "yes",
            "timeout": "300",
            "maxmemory": "2gb",
            "requirepass": "strong_password",
            "rename-command": {
                "CONFIG": "CONFIG_1234",
                "FLUSHALL": "FLUSHALL_1234",
                "FLUSHDB": "FLUSHDB_1234",
                "EVAL": "EVAL_1234",
                "KEYS": "KEYS_1234",
            },
        },
        "binding": "127.0.0.1",
        "auth_status": "enabled",
    }
    redis_scanner.service_repository.get_services_by_target_and_type.return_value = [
        mock_service
    ]

    # Act
    vulnerabilities = await redis_scanner.scan(mock_scan, 1, {})

    # Assert
    assert len(vulnerabilities) == 0
