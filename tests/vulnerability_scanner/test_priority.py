"""Tests for vulnerability prioritization algorithms."""

import pytest
from sqlalchemy.ext.asyncio import AsyncSession

from sentinelprobe.vulnerability_scanner.models import (
    AttackPattern,
    Vulnerability,
    VulnerabilityCreate,
    VulnerabilitySeverity,
    VulnerabilityStatus,
)
from sentinelprobe.vulnerability_scanner.priority import (
    calculate_attack_pattern_score,
    calculate_severity_score,
    calculate_vulnerability_score,
    prioritize_vulnerabilities,
)


@pytest.fixture
def mock_vulnerability_critical() -> Vulnerability:
    """Create a mock critical vulnerability for testing."""
    return Vulnerability(
        id=1,
        scan_id=1,
        target_id=1,
        name="Critical SQL Injection",
        description="Critical SQL injection vulnerability in login endpoint",
        severity=VulnerabilitySeverity.CRITICAL,
        status=VulnerabilityStatus.CONFIRMED,
        cve_id="CVE-2023-1234",
        cvss_score=9.8,
        affected_component="authentication_service",
        port_number=443,
        protocol="https",
        details={},
        remediation="Update to latest version and use parameterized queries",
    )


@pytest.fixture
def mock_vulnerability_high() -> Vulnerability:
    """Create a mock high severity vulnerability for testing."""
    return Vulnerability(
        id=2,
        scan_id=1,
        target_id=1,
        name="Open Admin Interface",
        description="High severity exposure of admin interface",
        severity=VulnerabilitySeverity.HIGH,
        status=VulnerabilityStatus.CONFIRMED,
        cve_id=None,
        cvss_score=None,
        affected_component="admin_portal",
        port_number=8080,
        protocol="http",
        details={},
        remediation="Implement proper authentication",
    )


@pytest.fixture
def mock_vulnerability_medium() -> Vulnerability:
    """Create a mock medium severity vulnerability for testing."""
    return Vulnerability(
        id=3,
        scan_id=1,
        target_id=1,
        name="Missing HTTP Headers",
        description="Missing security headers in HTTP responses",
        severity=VulnerabilitySeverity.MEDIUM,
        status=VulnerabilityStatus.CONFIRMED,
        cve_id=None,
        cvss_score=None,
        affected_component="web_server",
        port_number=80,
        protocol="http",
        details={},
        remediation="Add security headers to web server configuration",
    )


@pytest.fixture
def mock_vulnerability_low() -> Vulnerability:
    """Create a mock low severity vulnerability for testing."""
    return Vulnerability(
        id=4,
        scan_id=1,
        target_id=1,
        name="Information Disclosure",
        description="Server information disclosure in headers",
        severity=VulnerabilitySeverity.LOW,
        status=VulnerabilityStatus.UNCONFIRMED,
        cve_id=None,
        cvss_score=None,
        affected_component="web_server",
        port_number=80,
        protocol="http",
        details={},
        remediation="Configure server to hide version information",
    )


@pytest.fixture
def mock_attack_patterns():
    """Create mock attack patterns for testing."""
    return [
        (
            {
                "id": 1,
                "name": "SQL Injection",
                "description": "Attack pattern for SQL injection",
            },
            95.0,
        ),
        (
            {
                "id": 2,
                "name": "Cross-Site Scripting",
                "description": "Attack pattern for XSS",
            },
            85.0,
        ),
    ]


def test_severity_score_calculation(
    mock_vulnerability_critical,
    mock_vulnerability_high,
    mock_vulnerability_medium,
    mock_vulnerability_low,
):
    """Test calculation of severity scores."""
    # Test critical vulnerability
    critical_score = calculate_severity_score(mock_vulnerability_critical)
    assert critical_score > 9.0, "Critical vulnerability should have high score"

    # Test high severity vulnerability
    high_score = calculate_severity_score(mock_vulnerability_high)
    assert (
        7.0 < high_score < 9.0
    ), "High severity vulnerability should have appropriate score"

    # Test medium severity vulnerability
    medium_score = calculate_severity_score(mock_vulnerability_medium)
    assert (
        4.0 < medium_score < 7.0
    ), "Medium severity vulnerability should have appropriate score"

    # Test low severity vulnerability
    low_score = calculate_severity_score(mock_vulnerability_low)
    assert low_score < 4.0, "Low severity vulnerability should have low score"


def test_attack_pattern_score_calculation(mock_attack_patterns):
    """Test calculation of attack pattern scores."""
    # Test with mock attack patterns
    score = calculate_attack_pattern_score(mock_attack_patterns)
    assert (
        7.0 < score < 10.0
    ), "Attack pattern score should be high with high confidence matches"

    # Test with single low confidence pattern
    low_confidence = [({"id": 3, "name": "Test Pattern"}, 60.0)]
    low_score = calculate_attack_pattern_score(low_confidence)
    assert low_score < 6.0, "Low confidence pattern should result in lower score"

    # Test with no patterns
    no_patterns_score = calculate_attack_pattern_score([])
    assert no_patterns_score == 0.0, "No patterns should result in zero score"


def test_vulnerability_score_calculation(
    mock_vulnerability_critical, mock_attack_patterns
):
    """Test calculation of overall vulnerability scores."""
    # Test with all components
    score = calculate_vulnerability_score(
        mock_vulnerability_critical,
        mock_attack_patterns,
        business_impact=8.5,
        exploitability=9.0,
    )
    assert (
        8.0 < score < 10.0
    ), "Critical vulnerability with high impact should have high score"

    # Test with only severity
    severity_only_score = calculate_vulnerability_score(mock_vulnerability_critical)
    assert (
        4.0 < severity_only_score < 6.0
    ), "Score with only severity should be proportional to severity weight"


def test_vulnerability_prioritization(
    mock_vulnerability_critical,
    mock_vulnerability_high,
    mock_vulnerability_medium,
    mock_vulnerability_low,
):
    """Test prioritization of vulnerabilities."""
    vulnerabilities = [
        mock_vulnerability_low,
        mock_vulnerability_critical,
        mock_vulnerability_medium,
        mock_vulnerability_high,
    ]

    # Create attack patterns map
    attack_patterns_map = {
        1: [({"id": 1, "name": "SQL Injection"}, 95.0)],
        2: [({"id": 2, "name": "Authentication Bypass"}, 80.0)],
    }

    # Create business impact map
    business_impact_map = {
        1: 9.0,  # Critical vuln has high business impact
        2: 7.0,  # High vuln has moderate business impact
        3: 4.0,  # Medium vuln has low business impact
    }

    # Prioritize vulnerabilities
    prioritized = prioritize_vulnerabilities(
        vulnerabilities, attack_patterns_map, business_impact_map
    )

    # Verify order: critical, high, medium, low
    assert len(prioritized) == 4, "Should have 4 prioritized vulnerabilities"
    assert prioritized[0][0].id == 1, "Critical vulnerability should be first"
    assert prioritized[1][0].id == 2, "High vulnerability should be second"
    assert prioritized[2][0].id == 3, "Medium vulnerability should be third"
    assert prioritized[3][0].id == 4, "Low vulnerability should be fourth"

    # Verify scores are decreasing
    assert (
        prioritized[0][1] > prioritized[1][1] > prioritized[2][1] > prioritized[3][1]
    ), "Scores should be decreasing"


@pytest.mark.asyncio
async def test_vulnerability_prioritization_service(
    db_session: AsyncSession,
    mock_vulnerability_critical: Vulnerability,
):
    """Test the vulnerability prioritization through the service layer."""
    from sentinelprobe.vulnerability_scanner.repository import (
        VulnerabilityRepository,
        VulnerabilityScanRepository,
    )
    from sentinelprobe.vulnerability_scanner.service import VulnerabilityScannerService

    # Create a test vulnerability in the database
    service = VulnerabilityScannerService(db_session)

    # Create a vulnerability
    vulnerability = await service.create_vulnerability(
        VulnerabilityCreate(
            scan_id=1,
            target_id=1,
            name="Critical SQL Injection",
            description="A critical SQL injection vulnerability",
            severity=VulnerabilitySeverity.CRITICAL,
            cvss_score=9.8,
            cve_id="CVE-2023-1234",
            details={"business_impact": "high"},
        )
    )

    # Get the vulnerability score
    prioritized_vulns = await service.prioritize_target_vulnerabilities(target_id=1)

    # Assert that we have at least one vulnerability
    assert prioritized_vulns

    # Assert that the score is high for critical vulnerabilities
    vuln, score = prioritized_vulns[0]
    assert score > 0.7  # High score for critical vulnerability
    assert vuln.id == vulnerability.id
