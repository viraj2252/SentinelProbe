"""Tests for MongoDB scanner plugin."""

from unittest.mock import AsyncMock, MagicMock, patch

import pytest

from sentinelprobe.reconnaissance.models import Service, ServiceType
from sentinelprobe.vulnerability_scanner.models import (
    ScanStatus,
    ScanType,
    VulnerabilityCreate,
    VulnerabilityScan,
    VulnerabilitySeverity,
    VulnerabilityStatus,
)
from sentinelprobe.vulnerability_scanner.plugins.mongodb_scanner import MongoDBScanner


@pytest.fixture
def mock_mongodb_scanner():
    """Create a MongoDB scanner with mocked dependencies."""
    scanner = MongoDBScanner(AsyncMock())
    scanner.service_repository = AsyncMock()
    return scanner


@pytest.fixture
def mock_vulnerability_scan():
    """Create a mock vulnerability scan."""
    return VulnerabilityScan(
        id=1,
        job_id=100,
        target_id=200,
        strategy_id=None,
        name="Test MongoDB Scan",
        description="Test MongoDB scan description",
        scan_type=ScanType.STANDARD,
        scanner_module="mongodb_scanner",
        status=ScanStatus.RUNNING,
        parameters={},
        scan_metadata={},
        created_at=None,
        updated_at=None,
    )


@pytest.mark.asyncio
async def test_scan_no_services(mock_mongodb_scanner, mock_vulnerability_scan):
    """Test scanning when no MongoDB services are found."""
    # Set up the mock to return no services
    mock_mongodb_scanner.service_repository.get_services_by_target_and_type.return_value = (
        []
    )

    # Perform the scan
    results = await mock_mongodb_scanner.scan(
        mock_vulnerability_scan, target_id=200, parameters={}
    )

    # Check that the scanner looked for MongoDB services
    mock_mongodb_scanner.service_repository.get_services_by_target_and_type.assert_called_once_with(
        200, ServiceType.MONGODB
    )

    # Verify no vulnerabilities were found
    assert len(results) == 0


@pytest.mark.asyncio
async def test_scan_outdated_version(mock_mongodb_scanner, mock_vulnerability_scan):
    """Test scanning an outdated MongoDB version."""
    # Create a service with an outdated version
    service = Service(
        id=1,
        port_id=100,
        name="MongoDB",
        service_type=ServiceType.MONGODB,
        version="3.6.21",
        service_metadata={},
        created_at=None,
    )

    # Set up the mock to return the service
    mock_mongodb_scanner.service_repository.get_services_by_target_and_type.return_value = [
        service
    ]

    # Perform the scan
    results = await mock_mongodb_scanner.scan(
        mock_vulnerability_scan, target_id=200, parameters={}
    )

    # Verify an outdated version vulnerability was found
    assert len(results) == 1
    assert results[0].name == "Outdated MongoDB Version"
    assert "3.6.21" in results[0].description
    assert results[0].severity == VulnerabilitySeverity.MEDIUM


@pytest.mark.asyncio
async def test_scan_missing_authentication(
    mock_mongodb_scanner, mock_vulnerability_scan
):
    """Test scanning a MongoDB without authentication."""
    # Create a service with auth_status set to none
    service = Service(
        id=1,
        port_id=100,
        name="MongoDB",
        service_type=ServiceType.MONGODB,
        version="4.4.0",
        service_metadata={"auth_status": "none"},
        created_at=None,
    )

    # Set up the mock to return the service
    mock_mongodb_scanner.service_repository.get_services_by_target_and_type.return_value = [
        service
    ]

    # Perform the scan
    results = await mock_mongodb_scanner.scan(
        mock_vulnerability_scan, target_id=200, parameters={}
    )

    # Verify a missing authentication vulnerability was found
    assert any(r.name == "MongoDB Missing Authentication" for r in results)
    auth_vuln = next(r for r in results if r.name == "MongoDB Missing Authentication")
    assert auth_vuln.severity == VulnerabilitySeverity.HIGH


@pytest.mark.asyncio
async def test_scan_public_exposure(mock_mongodb_scanner, mock_vulnerability_scan):
    """Test scanning a MongoDB exposed to the public."""
    # Create a service exposed to the public
    service = Service(
        id=1,
        port_id=100,
        name="MongoDB",
        service_type=ServiceType.MONGODB,
        version="5.0.0",
        service_metadata={"binding": "0.0.0.0"},
        created_at=None,
    )

    # Set up the mock to return the service
    mock_mongodb_scanner.service_repository.get_services_by_target_and_type.return_value = [
        service
    ]

    # Perform the scan
    results = await mock_mongodb_scanner.scan(
        mock_vulnerability_scan, target_id=200, parameters={}
    )

    # Verify a public exposure vulnerability was found
    assert any(r.name == "MongoDB Exposed to Public" for r in results)
    exposure_vuln = next(r for r in results if r.name == "MongoDB Exposed to Public")
    assert exposure_vuln.severity == VulnerabilitySeverity.HIGH


@pytest.mark.asyncio
async def test_scan_insecure_configuration(
    mock_mongodb_scanner, mock_vulnerability_scan
):
    """Test scanning a MongoDB with insecure configuration."""
    # Create a service with insecure configuration
    service = Service(
        id=1,
        port_id=100,
        name="MongoDB",
        service_type=ServiceType.MONGODB,
        version="5.0.0",
        service_metadata={
            "config": {
                "security": {"javascriptEnabled": True},
                "net": {"http": {"enabled": True}},
            }
        },
        created_at=None,
    )

    # Set up the mock to return the service
    mock_mongodb_scanner.service_repository.get_services_by_target_and_type.return_value = [
        service
    ]

    # Perform the scan
    results = await mock_mongodb_scanner.scan(
        mock_vulnerability_scan, target_id=200, parameters={}
    )

    # Verify an insecure configuration vulnerability was found
    assert any(r.name == "MongoDB Insecure Configuration" for r in results)
    config_vuln = next(r for r in results if r.name == "MongoDB Insecure Configuration")
    assert config_vuln.severity == VulnerabilitySeverity.MEDIUM
    assert "javascriptEnabled" in str(config_vuln.details.get("config_issues", {}))


@pytest.mark.asyncio
async def test_scan_missing_rbac(mock_mongodb_scanner, mock_vulnerability_scan):
    """Test scanning a MongoDB without role-based access control."""
    # Create a service without RBAC
    service = Service(
        id=1,
        port_id=100,
        name="MongoDB",
        service_type=ServiceType.MONGODB,
        version="5.0.0",
        service_metadata={
            "config": {"security": {"authorization": "disabled"}},
            "authorization": "disabled",
        },
        created_at=None,
    )

    # Set up the mock to return the service
    mock_mongodb_scanner.service_repository.get_services_by_target_and_type.return_value = [
        service
    ]

    # Perform the scan
    results = await mock_mongodb_scanner.scan(
        mock_vulnerability_scan, target_id=200, parameters={}
    )

    # Verify a missing RBAC vulnerability was found
    assert any(r.name == "MongoDB Missing Role-Based Access Control" for r in results)
    rbac_vuln = next(
        r for r in results if r.name == "MongoDB Missing Role-Based Access Control"
    )
    assert rbac_vuln.severity == VulnerabilitySeverity.MEDIUM


@pytest.mark.asyncio
async def test_scan_secure_configuration(mock_mongodb_scanner, mock_vulnerability_scan):
    """Test scanning a MongoDB with secure configuration."""
    # Create a service with secure configuration
    service = Service(
        id=1,
        port_id=100,
        name="MongoDB",
        service_type=ServiceType.MONGODB,
        version="5.0.0",
        service_metadata={
            "config": {
                "security": {"authorization": "enabled", "javascriptEnabled": False},
                "net": {
                    "bindIp": "127.0.0.1",
                    "ssl": {"mode": "requireSSL"},
                    "http": {"enabled": False},
                },
            },
            "authorization": "enabled",
            "binding": "127.0.0.1",
            "auth_status": "required",
        },
        created_at=None,
    )

    # Set up the mock to return the service
    mock_mongodb_scanner.service_repository.get_services_by_target_and_type.return_value = [
        service
    ]

    # Perform the scan
    results = await mock_mongodb_scanner.scan(
        mock_vulnerability_scan, target_id=200, parameters={}
    )

    # Verify no vulnerabilities were found for this secure configuration
    assert not any(r.name == "MongoDB Insecure Configuration" for r in results)
    assert not any(r.name == "MongoDB Missing Authentication" for r in results)
    assert not any(r.name == "MongoDB Exposed to Public" for r in results)
    assert not any(
        r.name == "MongoDB Missing Role-Based Access Control" for r in results
    )
    # Only check that there are no specific MongoDB configuration vulnerabilities
    # (there might still be outdated version vulnerabilities if the version checking logic changes)
