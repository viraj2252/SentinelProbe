"""Plugin system for the exploitation engine."""

import abc
from typing import Any, Dict, List, Tuple

from sentinelprobe.exploitation.models import ExploitType, PayloadType
from sentinelprobe.reconnaissance.models import Target
from sentinelprobe.vulnerability_scanner.models import Vulnerability


class ExploitPlugin(abc.ABC):
    """Base class for exploitation plugins."""

    @property
    @abc.abstractmethod
    def name(self) -> str:
        """Get the name of the plugin.

        Returns:
            Plugin name
        """
        pass

    @property
    @abc.abstractmethod
    def description(self) -> str:
        """Get the description of the plugin.

        Returns:
            Plugin description
        """
        pass

    @property
    @abc.abstractmethod
    def exploit_type(self) -> ExploitType:
        """Get the type of exploit this plugin provides.

        Returns:
            Exploit type
        """
        pass

    @property
    @abc.abstractmethod
    def payload_type(self) -> PayloadType:
        """Get the type of payload this plugin generates.

        Returns:
            Payload type
        """
        pass

    @property
    @abc.abstractmethod
    def target_services(self) -> List[str]:
        """Get the services this plugin targets.

        Returns:
            List of service types
        """
        pass

    @property
    @abc.abstractmethod
    def risk_level(self) -> int:
        """Get the risk level of this exploit (1-10).

        Returns:
            Risk level
        """
        pass

    @abc.abstractmethod
    async def check_applicability(
        self, vulnerability: Vulnerability, target: Target
    ) -> bool:
        """Check if this plugin is applicable to the given vulnerability.

        Args:
            vulnerability: The vulnerability to check
            target: The target with the vulnerability

        Returns:
            True if applicable, False otherwise
        """
        pass

    @abc.abstractmethod
    async def generate_payload(
        self, vulnerability: Vulnerability, target: Target, parameters: Dict[str, Any]
    ) -> str:
        """Generate a payload for the exploit.

        Args:
            vulnerability: The vulnerability to exploit
            target: The target with the vulnerability
            parameters: Additional parameters for payload generation

        Returns:
            The generated payload
        """
        pass

    @abc.abstractmethod
    async def execute_exploit(
        self,
        vulnerability: Vulnerability,
        target: Target,
        payload: str,
        safe_mode: bool = True,
    ) -> Tuple[str, bool]:
        """Execute the exploit.

        Args:
            vulnerability: The vulnerability to exploit
            target: The target with the vulnerability
            payload: The payload to use
            safe_mode: Whether to operate in safe mode (no real exploitation)

        Returns:
            Tuple of (result text, success boolean)
        """
        pass

    @abc.abstractmethod
    async def check_success(
        self, vulnerability: Vulnerability, target: Target, result: str
    ) -> bool:
        """Check if the exploit was successful.

        Args:
            vulnerability: The vulnerability that was exploited
            target: The target with the vulnerability
            result: The result of the exploitation attempt

        Returns:
            True if successful, False otherwise
        """
        pass
