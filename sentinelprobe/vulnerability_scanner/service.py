"""Service layer for the Vulnerability Scanner module."""

import logging
from typing import Any, Dict, List, Optional, Type

from sqlalchemy.ext.asyncio import AsyncSession

from sentinelprobe.vulnerability_scanner.models import (
    ScanStatus,
    ScanType,
    Vulnerability,
    VulnerabilityCreate,
    VulnerabilityScan,
    VulnerabilityScanCreate,
    VulnerabilitySeverity,
    VulnerabilityStatus,
    VulnerabilityUpdate,
)
from sentinelprobe.vulnerability_scanner.repository import (
    VulnerabilityRepository,
    VulnerabilityScanRepository,
)

logger = logging.getLogger(__name__)


class ScannerPlugin:
    """Base class for vulnerability scanner plugins."""

    name = "base_scanner"
    description = "Base scanner plugin"

    def __init__(self, session: AsyncSession):
        """Initialize with session.

        Args:
            session: SQLAlchemy async session
        """
        self.session = session
        self.vulnerability_repo = VulnerabilityRepository(session)

    async def scan(
        self,
        scan: VulnerabilityScan,
        target_id: int,
        parameters: Dict[str, Any],
    ) -> List[VulnerabilityCreate]:
        """Perform the vulnerability scan.

        Args:
            scan: The scan configuration
            target_id: Target ID to scan
            parameters: Scan parameters

        Returns:
            List of detected vulnerabilities
        """
        # Base implementation does nothing
        return []


class BasicScanner(ScannerPlugin):
    """Basic vulnerability scanner implementation."""

    name = "basic_scanner"
    description = "Basic vulnerability scanner that checks for common issues"

    async def scan(
        self,
        scan: VulnerabilityScan,
        target_id: int,
        parameters: Dict[str, Any],
    ) -> List[VulnerabilityCreate]:
        """Perform a basic vulnerability scan.

        Args:
            scan: The scan configuration
            target_id: Target ID to scan
            parameters: Scan parameters

        Returns:
            List of detected vulnerabilities
        """
        # In a real implementation, this would perform actual scanning
        # For now, we just return a placeholder vulnerability
        vulnerabilities = [
            VulnerabilityCreate(
                scan_id=scan.id,
                target_id=target_id,
                name="Example Vulnerability",
                description="Example vulnerability found by basic scanner",
                severity=VulnerabilitySeverity.MEDIUM,
                status=VulnerabilityStatus.UNCONFIRMED,
                affected_component="example-component",
                details={
                    "finding_type": "example",
                    "technical_details": "Example technical details would go here",
                },
                remediation="This is an example remediation instruction.",
            )
        ]
        return vulnerabilities


class VulnerabilityScannerService:
    """Service for vulnerability scanning operations."""

    def __init__(self, session: AsyncSession):
        """Initialize with session.

        Args:
            session: SQLAlchemy async session
        """
        self.session = session
        self.scan_repo = VulnerabilityScanRepository(session)
        self.vulnerability_repo = VulnerabilityRepository(session)

        # Register scanner plugins
        self.scanner_plugins = {
            "basic_scanner": BasicScanner,
            # Add more scanner plugins here
        }

    async def create_scan(
        self,
        job_id: int,
        target_id: int,
        name: str,
        description: str,
        scan_type: ScanType = ScanType.STANDARD,
        scanner_module: str = "basic_scanner",
        parameters: Optional[Dict[str, Any]] = None,
        strategy_id: Optional[int] = None,
    ) -> VulnerabilityScan:
        """Create a new vulnerability scan.

        Args:
            job_id: Job ID
            target_id: Target ID
            name: Scan name
            description: Scan description
            scan_type: Scan type
            scanner_module: Scanner module to use
            parameters: Optional scan parameters
            strategy_id: Optional strategy ID

        Returns:
            Created vulnerability scan
        """
        scan_data = VulnerabilityScanCreate(
            job_id=job_id,
            target_id=target_id,
            strategy_id=strategy_id,
            name=name,
            description=description,
            scan_type=scan_type,
            scanner_module=scanner_module,
            parameters=parameters or {},
            scan_metadata={},
        )
        return await self.scan_repo.create_scan(scan_data)

    async def get_scan(self, scan_id: int) -> Optional[VulnerabilityScan]:
        """Get a vulnerability scan by ID.

        Args:
            scan_id: Vulnerability scan ID

        Returns:
            Vulnerability scan or None if not found
        """
        return await self.scan_repo.get_scan(scan_id)

    async def get_scan_vulnerabilities(self, scan_id: int) -> List[Vulnerability]:
        """Get vulnerabilities for a scan.

        Args:
            scan_id: Vulnerability scan ID

        Returns:
            List of vulnerabilities
        """
        return await self.vulnerability_repo.get_vulnerabilities_by_scan(scan_id)

    async def get_target_vulnerabilities(self, target_id: int) -> List[Vulnerability]:
        """Get vulnerabilities for a target.

        Args:
            target_id: Target ID

        Returns:
            List of vulnerabilities
        """
        return await self.vulnerability_repo.get_vulnerabilities_by_target(target_id)

    async def get_scanner_plugin(
        self, scanner_name: str
    ) -> Optional[Type[ScannerPlugin]]:
        """Get a scanner plugin by name.

        Args:
            scanner_name: Scanner plugin name

        Returns:
            Scanner plugin class or None if not found
        """
        return self.scanner_plugins.get(scanner_name)

    async def start_scan(self, scan_id: int) -> Optional[VulnerabilityScan]:
        """Start a vulnerability scan.

        Args:
            scan_id: Vulnerability scan ID

        Returns:
            Updated vulnerability scan or None if not found or already running
        """
        scan = await self.scan_repo.get_scan(scan_id)
        if not scan:
            logger.error(f"Scan {scan_id} not found")
            return None

        if scan.status != ScanStatus.PENDING:
            logger.error(f"Scan {scan_id} is not in PENDING state")
            return None

        # Update scan status to running
        scan = await self.scan_repo.update_scan_status(
            scan_id, ScanStatus.RUNNING, {"start_message": "Scan started"}
        )

        return scan

    async def execute_scan(self, scan_id: int) -> Optional[List[Vulnerability]]:
        """Execute a vulnerability scan.

        Args:
            scan_id: Vulnerability scan ID

        Returns:
            List of detected vulnerabilities or None if the scan failed
        """
        scan = await self.scan_repo.get_scan(scan_id)
        if not scan:
            logger.error(f"Scan {scan_id} not found")
            return None

        if scan.status != ScanStatus.RUNNING:
            logger.error(f"Scan {scan_id} is not in RUNNING state")
            return None

        try:
            # Get the scanner plugin
            scanner_class = await self.get_scanner_plugin(scan.scanner_module)
            if not scanner_class:
                error_msg = f"Scanner module {scan.scanner_module} not found"
                logger.error(error_msg)
                await self.scan_repo.update_scan_status(
                    scan_id, ScanStatus.FAILED, {"error": error_msg}
                )
                return None

            # Initialize the scanner plugin
            scanner = scanner_class(self.session)

            # Execute the scan
            vulnerability_data_list = await scanner.scan(
                scan, scan.target_id, scan.parameters
            )

            # Store the results
            vulnerabilities = []
            for vulnerability_data in vulnerability_data_list:
                vulnerability = await self.vulnerability_repo.create_vulnerability(
                    vulnerability_data
                )
                vulnerabilities.append(vulnerability)

            # Update scan status to completed
            await self.scan_repo.update_scan_status(
                scan_id,
                ScanStatus.COMPLETED,
                {
                    "completion_message": "Scan completed successfully",
                    "vulnerabilities_found": len(vulnerabilities),
                },
            )

            return vulnerabilities

        except Exception as e:
            error_msg = f"Error executing scan: {str(e)}"
            logger.exception(error_msg)
            await self.scan_repo.update_scan_status(
                scan_id, ScanStatus.FAILED, {"error": error_msg}
            )
            return None

    async def cancel_scan(self, scan_id: int) -> Optional[VulnerabilityScan]:
        """Cancel a vulnerability scan.

        Args:
            scan_id: Vulnerability scan ID

        Returns:
            Updated vulnerability scan or None if not found or not running
        """
        scan = await self.scan_repo.get_scan(scan_id)
        if not scan:
            logger.error(f"Scan {scan_id} not found")
            return None

        if scan.status != ScanStatus.RUNNING:
            logger.error(f"Scan {scan_id} is not in RUNNING state")
            return None

        # Update scan status to cancelled
        scan = await self.scan_repo.update_scan_status(
            scan_id, ScanStatus.CANCELLED, {"cancel_message": "Scan cancelled by user"}
        )

        return scan

    async def process_scan_from_strategy(
        self,
        strategy_id: int,
        job_id: int,
        target_id: int,
        strategy_data: Dict[str, Any],
    ) -> Optional[VulnerabilityScan]:
        """Process a vulnerability scan from a test strategy.

        Args:
            strategy_id: Strategy ID
            job_id: Job ID
            target_id: Target ID
            strategy_data: Strategy data

        Returns:
            Created and executed vulnerability scan or None if failed
        """
        try:
            service_type = strategy_data.get("service_type", "unknown")
            scan_type_str = strategy_data.get("scan_type", "standard")
            parameters = strategy_data.get("parameters", {})

            # Determine scan type
            try:
                scan_type = ScanType[scan_type_str.upper()]
            except (KeyError, AttributeError):
                scan_type = ScanType.STANDARD

            # Create the scan
            scan = await self.create_scan(
                job_id=job_id,
                target_id=target_id,
                name=f"Vulnerability scan for {service_type}",
                description=f"Automated vulnerability scan for {service_type} service",
                scan_type=scan_type,
                # Use appropriate scanner based on service_type
                scanner_module="basic_scanner",
                parameters=parameters,
                strategy_id=strategy_id,
            )

            # Start the scan
            await self.start_scan(scan.id)

            # Execute the scan
            await self.execute_scan(scan.id)

            return scan

        except Exception as e:
            logger.exception(f"Error processing scan from strategy: {str(e)}")
            return None

    async def get_vulnerability(self, vulnerability_id: int) -> Optional[Vulnerability]:
        """Get a vulnerability by ID.

        Args:
            vulnerability_id: Vulnerability ID

        Returns:
            Vulnerability or None if not found
        """
        return await self.vulnerability_repo.get_vulnerability(vulnerability_id)

    async def get_all_scans(self) -> List[VulnerabilityScan]:
        """Get all vulnerability scans.

        Returns:
            List of all vulnerability scans
        """
        return await self.scan_repo.get_all_scans()

    async def get_scans_by_job(self, job_id: int) -> List[VulnerabilityScan]:
        """Get vulnerability scans by job ID.

        Args:
            job_id: Job ID

        Returns:
            List of vulnerability scans for the job
        """
        return await self.scan_repo.get_scans_by_job(job_id)

    async def get_scans_by_target(self, target_id: int) -> List[VulnerabilityScan]:
        """Get vulnerability scans by target ID.

        Args:
            target_id: Target ID

        Returns:
            List of vulnerability scans for the target
        """
        return await self.scan_repo.get_scans_by_target(target_id)

    async def update_vulnerability(
        self, vulnerability_id: int, vulnerability_data: VulnerabilityUpdate
    ) -> Optional[Vulnerability]:
        """Update a vulnerability.

        Args:
            vulnerability_id: Vulnerability ID
            vulnerability_data: Vulnerability update data

        Returns:
            Updated vulnerability or None if not found
        """
        return await self.vulnerability_repo.update_vulnerability(
            vulnerability_id, vulnerability_data
        )
