"""Attack patterns module for the Vulnerability Scanner."""

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field
from sqlalchemy import JSON, DateTime
from sqlalchemy import Enum as SQLAEnum
from sqlalchemy import ForeignKey, Integer, String
from sqlalchemy.orm import Mapped, mapped_column, relationship

from sentinelprobe.core.db import Base
from sentinelprobe.vulnerability_scanner.models import (
    Vulnerability,
    VulnerabilitySeverity,
)


class AttackType(str, Enum):
    """Types of attacks."""

    INJECTION = "injection"
    XSS = "xss"
    AUTHENTICATION = "authentication"
    AUTHORIZATION = "authorization"
    INFORMATION_DISCLOSURE = "information_disclosure"
    DENIAL_OF_SERVICE = "denial_of_service"
    SERVER_SIDE_REQUEST_FORGERY = "ssrf"
    PRIVILEGE_ESCALATION = "privilege_escalation"
    BUSINESS_LOGIC = "business_logic"
    CRYPTOGRAPHIC = "cryptographic"
    API = "api"
    CUSTOM = "custom"


class AttackVector(str, Enum):
    """Attack vectors."""

    NETWORK = "network"
    ADJACENT_NETWORK = "adjacent_network"
    LOCAL = "local"
    PHYSICAL = "physical"
    WEB = "web"
    EMAIL = "email"
    USB = "usb"
    UNKNOWN = "unknown"


class AttackPattern(Base):
    """Attack pattern model."""

    __tablename__ = "attack_patterns"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(255), nullable=False, unique=True)
    description: Mapped[str] = mapped_column(String(1000), nullable=False)
    attack_type: Mapped[AttackType] = mapped_column(
        SQLAEnum(AttackType), nullable=False
    )
    attack_vector: Mapped[AttackVector] = mapped_column(
        SQLAEnum(AttackVector), nullable=False
    )
    typical_severity: Mapped[VulnerabilitySeverity] = mapped_column(
        SQLAEnum(VulnerabilitySeverity), nullable=False
    )
    mitre_id: Mapped[Optional[str]] = mapped_column(String(50), nullable=True)
    capec_id: Mapped[Optional[str]] = mapped_column(String(50), nullable=True)
    cwe_ids: Mapped[List[str]] = mapped_column(JSON, nullable=False, default=list)
    pattern_details: Mapped[Dict[str, Any]] = mapped_column(
        JSON, nullable=False, default=dict
    )
    pattern_indicators: Mapped[Dict[str, Any]] = mapped_column(
        JSON, nullable=False, default=dict
    )
    detection_guidance: Mapped[Optional[str]] = mapped_column(
        String(1000), nullable=True
    )
    remediation_guidance: Mapped[Optional[str]] = mapped_column(
        String(1000), nullable=True
    )
    created_at: Mapped[datetime] = mapped_column(
        DateTime, nullable=False, default=datetime.utcnow
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow
    )

    # Relationships will be defined in VulnerabilityAttackPatternMapping


class VulnerabilityAttackPatternMapping(Base):
    """Mapping between vulnerabilities and attack patterns."""

    __tablename__ = "vulnerability_attack_pattern_mapping"

    id: Mapped[int] = mapped_column(primary_key=True)
    vulnerability_id: Mapped[int] = mapped_column(
        ForeignKey("vulnerabilities.id"), nullable=False
    )
    attack_pattern_id: Mapped[int] = mapped_column(
        ForeignKey("attack_patterns.id"), nullable=False
    )
    match_confidence: Mapped[float] = mapped_column(
        Integer, nullable=False, default=100
    )  # 0-100 confidence level
    match_details: Mapped[Dict[str, Any]] = mapped_column(
        JSON, nullable=False, default=dict
    )
    created_at: Mapped[datetime] = mapped_column(
        DateTime, nullable=False, default=datetime.utcnow
    )

    # Relationships
    vulnerability: Mapped[Vulnerability] = relationship(
        "Vulnerability", backref="attack_pattern_mappings"
    )
    attack_pattern: Mapped[AttackPattern] = relationship(
        "AttackPattern", backref="vulnerability_mappings"
    )


# Pydantic models for API
class AttackPatternCreate(BaseModel):
    """Attack pattern creation model."""

    name: str
    description: str
    attack_type: AttackType
    attack_vector: AttackVector
    typical_severity: VulnerabilitySeverity
    mitre_id: Optional[str] = None
    capec_id: Optional[str] = None
    cwe_ids: List[str] = Field(default_factory=list)
    pattern_details: Dict[str, Any] = Field(default_factory=dict)
    pattern_indicators: Dict[str, Any] = Field(default_factory=dict)
    detection_guidance: Optional[str] = None
    remediation_guidance: Optional[str] = None


class AttackPatternUpdate(BaseModel):
    """Attack pattern update model."""

    name: Optional[str] = None
    description: Optional[str] = None
    attack_type: Optional[AttackType] = None
    attack_vector: Optional[AttackVector] = None
    typical_severity: Optional[VulnerabilitySeverity] = None
    mitre_id: Optional[str] = None
    capec_id: Optional[str] = None
    cwe_ids: Optional[List[str]] = None
    pattern_details: Optional[Dict[str, Any]] = None
    pattern_indicators: Optional[Dict[str, Any]] = None
    detection_guidance: Optional[str] = None
    remediation_guidance: Optional[str] = None


class AttackPatternResponse(BaseModel):
    """Attack pattern response model."""

    id: int
    name: str
    description: str
    attack_type: AttackType
    attack_vector: AttackVector
    typical_severity: VulnerabilitySeverity
    mitre_id: Optional[str]
    capec_id: Optional[str]
    cwe_ids: List[str]
    pattern_details: Dict[str, Any]
    pattern_indicators: Dict[str, Any]
    detection_guidance: Optional[str]
    remediation_guidance: Optional[str]
    created_at: datetime
    updated_at: datetime


class VulnerabilityAttackPatternMappingCreate(BaseModel):
    """Vulnerability-attack pattern mapping creation model."""

    vulnerability_id: int
    attack_pattern_id: int
    match_confidence: float = 100.0
    match_details: Dict[str, Any] = Field(default_factory=dict)


class VulnerabilityAttackPatternMappingResponse(BaseModel):
    """Vulnerability-attack pattern mapping response model."""

    id: int
    vulnerability_id: int
    attack_pattern_id: int
    match_confidence: float
    match_details: Dict[str, Any]
    created_at: datetime
