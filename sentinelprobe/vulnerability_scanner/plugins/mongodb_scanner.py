"""MongoDB Scanner Plugin for Vulnerability Scanner."""

import logging
import re
from typing import Any, Dict, List

from sqlalchemy.ext.asyncio import AsyncSession

from sentinelprobe.reconnaissance.models import ServiceType
from sentinelprobe.reconnaissance.repository import ServiceRepository
from sentinelprobe.vulnerability_scanner.models import (
    VulnerabilityCreate,
    VulnerabilityScan,
    VulnerabilitySeverity,
    VulnerabilityStatus,
)
from sentinelprobe.vulnerability_scanner.scanner_plugin import ScannerPlugin

logger = logging.getLogger(__name__)


class MongoDBScanner(ScannerPlugin):
    """MongoDB vulnerability scanner implementation.

    This scanner checks for common MongoDB vulnerabilities such as:
    - Authentication issues (missing/weak authentication)
    - Outdated MongoDB versions
    - Public exposure to internet
    - Insecure configurations (like bindIp 0.0.0.0)
    - Authorization issues (lack of role-based access control)
    """

    name = "mongodb_scanner"
    description = "Specialized scanner for MongoDB database services"

    def __init__(self, session: AsyncSession):
        """Initialize with session."""
        super().__init__(session)
        self.service_repository = ServiceRepository(session)

    async def scan(
        self,
        scan: VulnerabilityScan,
        target_id: int,
        parameters: Dict[str, Any],
    ) -> List[VulnerabilityCreate]:
        """Perform a MongoDB vulnerability scan.

        Args:
            scan: The scan configuration
            target_id: Target ID to scan
            parameters: Scan parameters

        Returns:
            List of detected vulnerabilities
        """
        vulnerabilities = []

        # Get MongoDB services for the target
        mongo_services = await self.service_repository.get_services_by_target_and_type(
            target_id, ServiceType.MONGODB
        )

        # If no MongoDB services found, return empty
        if not mongo_services:
            logger.info(f"No MongoDB services found for target {target_id}")
            return []

        # Scan each MongoDB service
        for service in mongo_services:
            service_details = service.service_metadata or {}
            port = service.port.port_number if service.port else 0
            version = service.version or ""

            # Check for outdated versions
            if self._check_outdated_version(version):
                vulnerabilities.append(
                    VulnerabilityCreate(
                        scan_id=scan.id,
                        target_id=target_id,
                        name="Outdated MongoDB Version",
                        description=f"MongoDB version {version} is outdated and may contain known vulnerabilities.",
                        severity=VulnerabilitySeverity.MEDIUM,
                        status=VulnerabilityStatus.UNCONFIRMED,
                        affected_component=f"MongoDB {version}",
                        port_number=port,
                        protocol="tcp",
                        details={
                            "version": version,
                            "recommendation": "Upgrade to the latest stable MongoDB version.",
                        },
                        remediation="Update MongoDB to the latest stable version. Refer to MongoDB documentation for upgrade procedures.",
                    )
                )

            # Check for authentication issues
            if self._check_missing_authentication(service_details):
                vulnerabilities.append(
                    VulnerabilityCreate(
                        scan_id=scan.id,
                        target_id=target_id,
                        name="MongoDB Missing Authentication",
                        description="MongoDB is running without authentication enabled.",
                        severity=VulnerabilitySeverity.HIGH,
                        status=VulnerabilityStatus.UNCONFIRMED,
                        affected_component=f"MongoDB {version}",
                        port_number=port,
                        protocol="tcp",
                        details={
                            "auth_status": service_details.get("auth_status", "none"),
                            "recommendation": "Enable authentication and configure strong credentials.",
                        },
                        remediation="Enable MongoDB authentication and configure SCRAM authentication mechanism. Use strong passwords for all database users.",
                    )
                )

            # Check for public exposure
            if self._check_public_exposure(service_details):
                vulnerabilities.append(
                    VulnerabilityCreate(
                        scan_id=scan.id,
                        target_id=target_id,
                        name="MongoDB Exposed to Public",
                        description="MongoDB is exposed to the public internet which increases the attack surface.",
                        severity=VulnerabilitySeverity.HIGH,
                        status=VulnerabilityStatus.UNCONFIRMED,
                        affected_component=f"MongoDB {version}",
                        port_number=port,
                        protocol="tcp",
                        details={
                            "binding": service_details.get("binding", "unknown"),
                            "recommendation": "Configure MongoDB to listen only on private interfaces.",
                        },
                        remediation="Configure the bindIp option in mongodb.conf to bind only to specific IPs. Use firewalls to restrict access to trusted networks.",
                    )
                )

            # Check for insecure configurations
            if self._check_insecure_configuration(service_details):
                vulnerabilities.append(
                    VulnerabilityCreate(
                        scan_id=scan.id,
                        target_id=target_id,
                        name="MongoDB Insecure Configuration",
                        description="MongoDB has insecure configuration settings.",
                        severity=VulnerabilitySeverity.MEDIUM,
                        status=VulnerabilityStatus.UNCONFIRMED,
                        affected_component=f"MongoDB {version}",
                        port_number=port,
                        protocol="tcp",
                        details={
                            "config_issues": self._get_insecure_config_details(
                                service_details
                            ),
                            "recommendation": "Review and update MongoDB configuration based on security best practices.",
                        },
                        remediation="Update MongoDB configuration to follow security best practices. Disable JavaScript execution if not needed. Enable authentication and authorization.",
                    )
                )

            # Check for lack of role-based access control
            if self._check_missing_rbac(service_details):
                vulnerabilities.append(
                    VulnerabilityCreate(
                        scan_id=scan.id,
                        target_id=target_id,
                        name="MongoDB Missing Role-Based Access Control",
                        description="MongoDB is not using role-based access control, allowing users to have excessive privileges.",
                        severity=VulnerabilitySeverity.MEDIUM,
                        status=VulnerabilityStatus.UNCONFIRMED,
                        affected_component=f"MongoDB {version}",
                        port_number=port,
                        protocol="tcp",
                        details={
                            "authorization": service_details.get(
                                "authorization", "disabled"
                            ),
                            "recommendation": "Enable role-based access control and create users with appropriate roles.",
                        },
                        remediation="Enable MongoDB authorization and create users with appropriate roles following the principle of least privilege.",
                    )
                )

        return vulnerabilities

    def _check_missing_authentication(self, service_details: Dict[str, Any]) -> bool:
        """Check if MongoDB is running without authentication."""
        # Check auth_status if available
        if service_details.get("auth_status") == "none":
            return True

        # Check if authentication mode is disabled
        if "config" in service_details:
            config = service_details.get("config", {})
            if not config.get("security", {}).get("authorization"):
                return True

        # Check for auth-related info in banner
        if "raw_banner" in service_details:
            banner = service_details.get("raw_banner", "").lower()
            if "auth" not in banner or "unauthorized" in banner:
                return True

        return False

    def _check_outdated_version(self, version: str) -> bool:
        """Check if the MongoDB version is outdated."""
        if not version:
            return False

        # Extract version number
        match = re.search(r"(\d+)\.(\d+)\.(\d+)", version)
        if not match:
            return False

        major, minor, patch = map(int, match.groups())

        # As of 2023, MongoDB versions below 4.4 are considered outdated
        if major < 4:
            return True
        elif major == 4 and minor < 4:
            return True

        return False

    def _check_public_exposure(self, service_details: Dict[str, Any]) -> bool:
        """Check if MongoDB is exposed to the public internet."""
        # Check binding configuration
        if "binding" in service_details:
            binding = service_details.get("binding", "")
            # If bound to 0.0.0.0 or public IP, consider it exposed
            if (
                binding == "0.0.0.0"
                or not binding.startswith("127.")
                and not binding.startswith("192.168.")
                and not binding.startswith("10.")
                and not binding.startswith("172.")
            ):
                return True

        # Check for bindIp in config
        if "config" in service_details:
            config = service_details.get("config", {})
            bind_ip = config.get("net", {}).get("bindIp", "")
            if "0.0.0.0" in bind_ip or "," in bind_ip:
                return True

        return False

    def _check_insecure_configuration(self, service_details: Dict[str, Any]) -> bool:
        """Check if MongoDB has insecure configuration settings."""
        insecure_settings = []

        # Get config if available
        config = service_details.get("config", {})

        # If no config is available, we can't determine if it's insecure
        if not config:
            return False

        # Check JavaScript execution
        if config.get("security", {}).get("javascriptEnabled") is True:
            insecure_settings.append("javascriptEnabled")

        # Check HTTP interface
        if config.get("net", {}).get("http", {}).get("enabled") is True:
            insecure_settings.append("httpEnabled")

        # Check for SSL/TLS
        ssl_mode = config.get("net", {}).get("ssl", {}).get("mode", "").lower()
        if ssl_mode and ssl_mode not in ["requiressl", "preferssl"]:
            insecure_settings.append("sslDisabled")

        # Check for privileged ports
        port = service_details.get("port", 0)
        if port < 1024 and port != 0:  # Ignore default port of 0
            insecure_settings.append("privilegedPort")

        # Log insecure settings for debugging
        if insecure_settings:
            logger.debug(f"Insecure MongoDB settings detected: {insecure_settings}")

        return len(insecure_settings) > 0

    def _check_missing_rbac(self, service_details: Dict[str, Any]) -> bool:
        """Check if MongoDB lacks role-based access control."""
        # Check if authorization is enabled
        if "config" in service_details:
            config = service_details.get("config", {})
            if config.get("security", {}).get("authorization") != "enabled":
                return True

        # Check authorization status if available
        if service_details.get("authorization") == "disabled":
            return True

        return False

    def _get_insecure_config_details(
        self, service_details: Dict[str, Any]
    ) -> Dict[str, Any]:
        """Get details about insecure configuration settings."""
        details = {}
        config = service_details.get("config", {})

        # Check JavaScript execution
        if config.get("security", {}).get("javascriptEnabled") is True:
            details["javascriptEnabled"] = True

        # Check HTTP interface
        if config.get("net", {}).get("http", {}).get("enabled") is True:
            details["httpEnabled"] = True

        # Check for SSL/TLS
        ssl_mode = config.get("net", {}).get("ssl", {}).get("mode", "").lower()
        if ssl_mode and ssl_mode not in ["requiressl", "preferssl"]:
            details["sslMode"] = ssl_mode or "disabled"

        # Check for privileged ports
        port = service_details.get("port", 0)
        if port < 1024 and port != 0:  # Ignore default port of 0
            details["port"] = port

        return details
