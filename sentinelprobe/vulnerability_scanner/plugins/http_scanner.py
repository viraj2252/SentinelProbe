"""HTTP Scanner Plugin for Vulnerability Scanner."""

import logging
import re
from typing import Any, Dict, List

from sqlalchemy.ext.asyncio import AsyncSession

from sentinelprobe.reconnaissance.models import ServiceType
from sentinelprobe.reconnaissance.repository import ServiceRepository
from sentinelprobe.vulnerability_scanner.models import (
    VulnerabilityCreate,
    VulnerabilityScan,
    VulnerabilitySeverity,
    VulnerabilityStatus,
)
from sentinelprobe.vulnerability_scanner.scanner_plugin import ScannerPlugin

logger = logging.getLogger(__name__)


class HttpScanner(ScannerPlugin):
    """HTTP vulnerability scanner implementation.

    This scanner checks for common HTTP vulnerabilities such as:
    - Missing security headers
    - Insecure HTTP methods
    - Information disclosure in headers
    - Outdated web server versions
    """

    name = "http_scanner"
    description = "Specialized scanner for HTTP/HTTPS services"

    def __init__(self, session: AsyncSession):
        """Initialize with session."""
        super().__init__(session)
        self.service_repository = ServiceRepository(session)

    async def scan(
        self,
        scan: VulnerabilityScan,
        target_id: int,
        parameters: Dict[str, Any],
    ) -> List[VulnerabilityCreate]:
        """Perform an HTTP vulnerability scan.

        Args:
            scan: The scan configuration
            target_id: Target ID to scan
            parameters: Scan parameters including target host/ip

        Returns:
            List of detected vulnerabilities
        """
        vulnerabilities = []

        # Get HTTP/HTTPS services for the target
        services = await self.service_repository.get_services_by_target_and_type(
            target_id=target_id, service_type=ServiceType.HTTP
        )

        if not services:
            logger.info(f"No HTTP services found for target {target_id}")
            return []

        for service in services:
            port = service.port
            service_details = service.metadata or {}

            # Check for missing security headers
            if self._check_missing_security_headers(service_details):
                vulnerabilities.append(
                    VulnerabilityCreate(
                        scan_id=scan.id,
                        target_id=target_id,
                        name="Missing Security Headers",
                        description=f"The web server on port {port} is missing important security headers.",
                        severity=VulnerabilitySeverity.MEDIUM,
                        status=VulnerabilityStatus.CONFIRMED,
                        affected_component=f"web-server:{port}",
                        port_number=port,
                        protocol=service.protocol,
                        details={
                            "missing_headers": self._get_missing_headers(
                                service_details
                            ),
                            "finding_type": "header_security",
                        },
                        remediation="Configure the web server to include security headers such as "
                        "X-Content-Type-Options, X-Frame-Options, Content-Security-Policy, "
                        "and Strict-Transport-Security.",
                    )
                )

            # Check for outdated web server version
            if self._check_outdated_version(service_details):
                vulnerabilities.append(
                    VulnerabilityCreate(
                        scan_id=scan.id,
                        target_id=target_id,
                        name="Outdated Web Server",
                        description=f"The web server on port {port} is running an outdated version.",
                        severity=VulnerabilitySeverity.HIGH,
                        status=VulnerabilityStatus.CONFIRMED,
                        affected_component=f"web-server:{port}",
                        port_number=port,
                        protocol=service.protocol,
                        details={
                            "server_version": service_details.get("version", "unknown"),
                            "finding_type": "outdated_software",
                        },
                        remediation="Update the web server to the latest version to address known vulnerabilities.",
                    )
                )

            # Check for information disclosure
            if self._check_information_disclosure(service_details):
                vulnerabilities.append(
                    VulnerabilityCreate(
                        scan_id=scan.id,
                        target_id=target_id,
                        name="Information Disclosure",
                        description=f"The web server on port {port} is disclosing sensitive information in headers.",
                        severity=VulnerabilitySeverity.MEDIUM,
                        status=VulnerabilityStatus.CONFIRMED,
                        affected_component=f"web-server:{port}",
                        port_number=port,
                        protocol=service.protocol,
                        details={
                            "disclosed_info": self._get_disclosed_info(service_details),
                            "finding_type": "information_disclosure",
                        },
                        remediation="Configure the web server to hide version information and unnecessary headers.",
                    )
                )

            # Check for insecure HTTP (if HTTPS is not used)
            if port == 80 or service.protocol.lower() == "http":
                vulnerabilities.append(
                    VulnerabilityCreate(
                        scan_id=scan.id,
                        target_id=target_id,
                        name="Insecure HTTP",
                        description=f"The web server on port {port} is using insecure HTTP instead of HTTPS.",
                        severity=VulnerabilitySeverity.MEDIUM,
                        status=VulnerabilityStatus.CONFIRMED,
                        affected_component=f"web-server:{port}",
                        port_number=port,
                        protocol=service.protocol,
                        details={
                            "finding_type": "insecure_protocol",
                            "recommendation": "Enable HTTPS and redirect HTTP to HTTPS",
                        },
                        remediation="Configure the web server to use HTTPS with a valid SSL/TLS certificate and "
                        "redirect all HTTP traffic to HTTPS.",
                    )
                )

        return vulnerabilities

    def _check_missing_security_headers(self, service_details: Dict[str, Any]) -> bool:
        """Check if important security headers are missing."""
        headers = service_details.get("headers", {})
        important_headers = [
            "x-content-type-options",
            "x-frame-options",
            "content-security-policy",
            "strict-transport-security",
        ]

        for header in important_headers:
            if not any(h.lower() == header for h in headers):
                return True

        return False

    def _get_missing_headers(self, service_details: Dict[str, Any]) -> List[str]:
        """Get a list of missing security headers."""
        headers = service_details.get("headers", {})
        important_headers = [
            "X-Content-Type-Options",
            "X-Frame-Options",
            "Content-Security-Policy",
            "Strict-Transport-Security",
        ]

        return [
            h
            for h in important_headers
            if not any(key.lower() == h.lower() for key in headers)
        ]

    def _check_outdated_version(self, service_details: Dict[str, Any]) -> bool:
        """Check if the web server version is outdated."""
        version = service_details.get("version", "")
        if not version:
            return False

        # Example: Check for outdated Apache versions
        if "apache" in version.lower():
            match = re.search(r"Apache/(\d+)\.(\d+)\.(\d+)", version)
            if match:
                major, minor, patch = map(int, match.groups())
                if major < 2 or (major == 2 and minor < 4):
                    return True

        # Example: Check for outdated Nginx versions
        if "nginx" in version.lower():
            match = re.search(r"nginx/(\d+)\.(\d+)\.(\d+)", version)
            if match:
                major, minor, patch = map(int, match.groups())
                if major < 1 or (major == 1 and minor < 18):
                    return True

        return False

    def _check_information_disclosure(self, service_details: Dict[str, Any]) -> bool:
        """Check if the server is disclosing sensitive information."""
        headers = service_details.get("headers", {})
        server_header = headers.get("Server", "")
        x_powered_by = headers.get("X-Powered-By", "")

        # Check if detailed version information is disclosed
        if (server_header and "/" in server_header) or x_powered_by:
            return True

        return False

    def _get_disclosed_info(self, service_details: Dict[str, Any]) -> Dict[str, str]:
        """Get disclosed information from headers."""
        headers = service_details.get("headers", {})
        disclosed = {}

        if "Server" in headers:
            disclosed["Server"] = headers["Server"]

        if "X-Powered-By" in headers:
            disclosed["X-Powered-By"] = headers["X-Powered-By"]

        if "X-AspNet-Version" in headers:
            disclosed["X-AspNet-Version"] = headers["X-AspNet-Version"]

        if "X-Runtime" in headers:
            disclosed["X-Runtime"] = headers["X-Runtime"]

        return disclosed
