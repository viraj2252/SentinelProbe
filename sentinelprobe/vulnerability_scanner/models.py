"""Models for the Vulnerability Scanner module."""

import enum
from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field
from sqlalchemy import JSON, DateTime
from sqlalchemy import Enum as SQLAEnum
from sqlalchemy import ForeignKey, Integer, String
from sqlalchemy.orm import Mapped, mapped_column, relationship

from sentinelprobe.core.db import Base


class VulnerabilitySeverity(enum.Enum):
    """Vulnerability severity levels."""

    INFO = "info"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class VulnerabilityStatus(enum.Enum):
    """Vulnerability status values."""

    UNCONFIRMED = "unconfirmed"
    CONFIRMED = "confirmed"
    FALSE_POSITIVE = "false_positive"
    REMEDIATED = "remediated"
    NOT_FIXED = "not_fixed"


class ScanStatus(enum.Enum):
    """Vulnerability scan status values."""

    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class ScanType(enum.Enum):
    """Vulnerability scan types."""

    BASIC = "basic"
    STANDARD = "standard"
    COMPREHENSIVE = "comprehensive"
    CUSTOM = "custom"


class VulnerabilityScan(Base):
    """Vulnerability scan model."""

    __tablename__ = "vulnerability_scans"

    id: Mapped[int] = mapped_column(primary_key=True)
    job_id: Mapped[int] = mapped_column(ForeignKey("jobs.id"), nullable=False)
    target_id: Mapped[int] = mapped_column(ForeignKey("targets.id"), nullable=False)
    strategy_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("test_strategies.id"), nullable=True
    )
    name: Mapped[str] = mapped_column(String(255), nullable=False)
    description: Mapped[str] = mapped_column(String(1000), nullable=False)
    scan_type: Mapped[ScanType] = mapped_column(SQLAEnum(ScanType), nullable=False)
    status: Mapped[ScanStatus] = mapped_column(
        SQLAEnum(ScanStatus), nullable=False, default=ScanStatus.PENDING
    )
    scanner_module: Mapped[str] = mapped_column(String(255), nullable=False)
    parameters: Mapped[Dict[str, Any]] = mapped_column(
        JSON, nullable=False, default=dict
    )
    scan_metadata: Mapped[Dict[str, Any]] = mapped_column(
        JSON, nullable=False, default=dict
    )
    start_time: Mapped[Optional[datetime]] = mapped_column(DateTime, nullable=True)
    end_time: Mapped[Optional[datetime]] = mapped_column(DateTime, nullable=True)
    created_at: Mapped[datetime] = mapped_column(
        DateTime, nullable=False, default=datetime.utcnow
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow
    )

    # Relationships
    vulnerabilities: Mapped[List["Vulnerability"]] = relationship(
        "Vulnerability", back_populates="scan", cascade="all, delete-orphan"
    )


class Vulnerability(Base):
    """Vulnerability model."""

    __tablename__ = "vulnerabilities"

    id: Mapped[int] = mapped_column(primary_key=True)
    scan_id: Mapped[int] = mapped_column(
        ForeignKey("vulnerability_scans.id"), nullable=False
    )
    target_id: Mapped[int] = mapped_column(ForeignKey("targets.id"), nullable=False)
    name: Mapped[str] = mapped_column(String(255), nullable=False)
    description: Mapped[str] = mapped_column(String(1000), nullable=False)
    severity: Mapped[VulnerabilitySeverity] = mapped_column(
        SQLAEnum(VulnerabilitySeverity), nullable=False
    )
    status: Mapped[VulnerabilityStatus] = mapped_column(
        SQLAEnum(VulnerabilityStatus),
        nullable=False,
        default=VulnerabilityStatus.UNCONFIRMED,
    )
    cve_id: Mapped[Optional[str]] = mapped_column(String(50), nullable=True)
    cvss_score: Mapped[Optional[float]] = mapped_column(Integer, nullable=True)
    affected_component: Mapped[str] = mapped_column(String(255), nullable=False)
    port_number: Mapped[Optional[int]] = mapped_column(Integer, nullable=True)
    protocol: Mapped[Optional[str]] = mapped_column(String(20), nullable=True)
    details: Mapped[Dict[str, Any]] = mapped_column(JSON, nullable=False, default=dict)
    remediation: Mapped[Optional[str]] = mapped_column(String(1000), nullable=True)
    created_at: Mapped[datetime] = mapped_column(
        DateTime, nullable=False, default=datetime.utcnow
    )
    updated_at: Mapped[datetime] = mapped_column(
        DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow
    )

    # Relationships
    scan: Mapped[VulnerabilityScan] = relationship(
        "VulnerabilityScan", back_populates="vulnerabilities"
    )


# Pydantic models for API
class VulnerabilityScanCreate(BaseModel):
    """Vulnerability scan creation model."""

    job_id: int
    target_id: int
    strategy_id: Optional[int] = None
    name: str
    description: str
    scan_type: ScanType
    scanner_module: str
    parameters: Dict[str, Any] = Field(default_factory=dict)
    scan_metadata: Dict[str, Any] = Field(default_factory=dict)


class VulnerabilityScanUpdate(BaseModel):
    """Vulnerability scan update model."""

    name: Optional[str] = None
    description: Optional[str] = None
    status: Optional[ScanStatus] = None
    parameters: Optional[Dict[str, Any]] = None
    scan_metadata: Optional[Dict[str, Any]] = None
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None


class VulnerabilityScanResponse(BaseModel):
    """Vulnerability scan response model."""

    id: int
    job_id: int
    target_id: int
    strategy_id: Optional[int]
    name: str
    description: str
    scan_type: ScanType
    status: ScanStatus
    scanner_module: str
    parameters: Dict[str, Any]
    scan_metadata: Dict[str, Any]
    start_time: Optional[datetime]
    end_time: Optional[datetime]
    created_at: datetime
    updated_at: datetime


class VulnerabilityCreate(BaseModel):
    """Vulnerability creation model."""

    scan_id: int
    target_id: int
    name: str
    description: str
    severity: VulnerabilitySeverity
    status: VulnerabilityStatus = VulnerabilityStatus.UNCONFIRMED
    cve_id: Optional[str] = None
    cvss_score: Optional[float] = None
    affected_component: str
    port_number: Optional[int] = None
    protocol: Optional[str] = None
    details: Dict[str, Any] = Field(default_factory=dict)
    remediation: Optional[str] = None


class VulnerabilityUpdate(BaseModel):
    """Vulnerability update model."""

    name: Optional[str] = None
    description: Optional[str] = None
    severity: Optional[VulnerabilitySeverity] = None
    status: Optional[VulnerabilityStatus] = None
    cve_id: Optional[str] = None
    cvss_score: Optional[float] = None
    affected_component: Optional[str] = None
    port_number: Optional[int] = None
    protocol: Optional[str] = None
    details: Optional[Dict[str, Any]] = None
    remediation: Optional[str] = None


class VulnerabilityResponse(BaseModel):
    """Vulnerability response model."""

    id: int
    scan_id: int
    target_id: int
    name: str
    description: str
    severity: VulnerabilitySeverity
    status: VulnerabilityStatus
    cve_id: Optional[str]
    cvss_score: Optional[float]
    affected_component: str
    port_number: Optional[int]
    protocol: Optional[str]
    details: Dict[str, Any]
    remediation: Optional[str]
    created_at: datetime
    updated_at: datetime
