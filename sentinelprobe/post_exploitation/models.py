"""Data models for the Post-Exploitation module."""

import enum
import uuid
from datetime import datetime
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field


class PostExploitationType(str, enum.Enum):
    """Types of post-exploitation activities."""

    PRIVILEGE_ESCALATION = "privilege_escalation"
    LATERAL_MOVEMENT = "lateral_movement"
    DATA_EXFILTRATION = "data_exfiltration"
    PERSISTENCE = "persistence"
    DEFENSE_EVASION = "defense_evasion"
    CREDENTIAL_ACCESS = "credential_access"
    DISCOVERY = "discovery"
    CLEANUP = "cleanup"


class PrivilegeLevel(str, enum.Enum):
    """Privilege levels for post-exploitation activities."""

    USER = "user"
    SYSTEM = "system"
    ADMIN = "admin"
    ROOT = "root"
    UNKNOWN = "unknown"


class PostExploitationActivity(BaseModel):
    """Base model for post-exploitation activities."""

    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    type: PostExploitationType
    target_id: str
    exploit_id: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    status: str = "pending"
    metadata: Dict[str, Any] = Field(default_factory=dict)


class PrivilegeEscalationResult(BaseModel):
    """Result of a privilege escalation attempt."""

    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    activity_id: str
    success: bool
    initial_privilege: PrivilegeLevel
    achieved_privilege: Optional[PrivilegeLevel] = None
    technique_used: str
    details: str
    commands_executed: List[str] = Field(default_factory=list)
    output: Optional[str] = None
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    cleanup_required: bool = True
    cleanup_commands: List[str] = Field(default_factory=list)


class LateralMovementTarget(BaseModel):
    """Target for lateral movement."""

    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    target_id: str
    hostname: str
    ip_address: str
    access_method: str  # ssh, smb, winrm, etc.
    credentials: Optional[Dict[str, str]] = None
    privilege_level: PrivilegeLevel = PrivilegeLevel.UNKNOWN


class LateralMovementResult(BaseModel):
    """Result of a lateral movement attempt."""

    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    activity_id: str
    success: bool
    source_target_id: str
    destination_target_id: str
    technique_used: str
    details: str
    commands_executed: List[str] = Field(default_factory=list)
    output: Optional[str] = None
    new_targets_discovered: List[LateralMovementTarget] = Field(default_factory=list)
    timestamp: datetime = Field(default_factory=datetime.utcnow)
    cleanup_required: bool = True
    cleanup_commands: List[str] = Field(default_factory=list)


class CleanupResult(BaseModel):
    """Result of a cleanup operation."""

    id: str = Field(default_factory=lambda: str(uuid.uuid4()))
    activity_id: str
    success: bool
    target_id: str
    steps_performed: List[str] = Field(default_factory=list)
    commands_executed: List[str] = Field(default_factory=list)
    details: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)


class PostExploitationConfig(BaseModel):
    """Configuration for post-exploitation activities."""

    max_depth: int = 2  # How deep to go in lateral movement
    safe_mode: bool = True  # Whether to operate in safe mode
    allowed_techniques: List[str] = Field(
        default_factory=list
    )  # Specific techniques to use
    excluded_techniques: List[str] = Field(default_factory=list)  # Techniques to avoid
    timeout_seconds: int = 300  # Maximum execution time
    cleanup_required: bool = True  # Whether to perform cleanup


class PostExploitationActivityCreate(BaseModel):
    """Model for creating a post-exploitation activity."""

    type: PostExploitationType
    target_id: str
    exploit_id: str
    config: Optional[PostExploitationConfig] = None
    metadata: Dict[str, Any] = Field(default_factory=dict)


class PostExploitationRequest(BaseModel):
    """Request model for post-exploitation activities."""

    activity_type: PostExploitationType
    target_id: str
    exploit_id: str
    config: Optional[PostExploitationConfig] = None
    parameters: Dict[str, Any] = Field(default_factory=dict)


class PostExploitationResponse(BaseModel):
    """Response model for post-exploitation activities."""

    activity_id: str
    success: bool
    result: Union[
        PrivilegeEscalationResult, LateralMovementResult, CleanupResult, Dict[str, Any]
    ]
    details: str
    timestamp: datetime = Field(default_factory=datetime.utcnow)
