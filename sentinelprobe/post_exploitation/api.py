"""API interface for the Post-Exploitation module."""

from typing import Any, Dict, List, Optional

from fastapi import APIRouter, Depends, HTTPException, Query, status

from sentinelprobe.core.logging import get_logger
from sentinelprobe.post_exploitation.models import (
    CleanupResult,
    LateralMovementResult,
    PostExploitationActivity,
    PostExploitationRequest,
    PostExploitationResponse,
    PostExploitationType,
    PrivilegeEscalationResult,
)
from sentinelprobe.post_exploitation.service import (
    PostExploitationService,
    get_post_exploitation_service,
)

logger = get_logger(__name__)

router = APIRouter(prefix="/post-exploitation", tags=["post-exploitation"])


async def get_service() -> PostExploitationService:
    """Get the post-exploitation service.

    Returns:
        Post-exploitation service
    """
    return await get_post_exploitation_service()


@router.post(
    "/privilege-escalation",
    response_model=PostExploitationResponse,
    status_code=status.HTTP_200_OK,
    summary="Perform privilege escalation",
    description="Attempt to escalate privileges on a target system after successful exploitation.",
)
async def privilege_escalation(
    request: Dict[str, Any], service: PostExploitationService = Depends(get_service)
) -> PostExploitationResponse:
    """Perform privilege escalation on a target.

    Args:
        request: Request data
        service: Post-exploitation service

    Returns:
        Post-exploitation response
    """
    post_exploitation_request = PostExploitationRequest(
        activity_type=PostExploitationType.PRIVILEGE_ESCALATION,
        **request,
    )

    return await service.perform_privilege_escalation(post_exploitation_request)


@router.post(
    "/lateral-movement",
    response_model=PostExploitationResponse,
    status_code=status.HTTP_200_OK,
    summary="Perform lateral movement",
    description="Attempt to move laterally from a compromised target to other systems.",
)
async def lateral_movement(
    request: Dict[str, Any], service: PostExploitationService = Depends(get_service)
) -> PostExploitationResponse:
    """Perform lateral movement from a compromised target.

    Args:
        request: Request data
        service: Post-exploitation service

    Returns:
        Post-exploitation response
    """
    post_exploitation_request = PostExploitationRequest(
        activity_type=PostExploitationType.LATERAL_MOVEMENT,
        **request,
    )

    return await service.perform_lateral_movement(post_exploitation_request)


@router.post(
    "/cleanup",
    response_model=PostExploitationResponse,
    status_code=status.HTTP_200_OK,
    summary="Perform cleanup",
    description="Clean up artifacts and restore systems after post-exploitation activities.",
)
async def cleanup(
    request: Dict[str, Any], service: PostExploitationService = Depends(get_service)
) -> PostExploitationResponse:
    """Perform cleanup after post-exploitation.

    Args:
        request: Request data
        service: Post-exploitation service

    Returns:
        Post-exploitation response
    """
    post_exploitation_request = PostExploitationRequest(
        activity_type=PostExploitationType.CLEANUP,
        **request,
    )

    return await service.perform_cleanup(post_exploitation_request)


@router.post(
    "/execute",
    response_model=PostExploitationResponse,
    status_code=status.HTTP_200_OK,
    summary="Execute post-exploitation activity",
    description="Execute a specific post-exploitation activity based on the provided type.",
)
async def execute_post_exploitation(
    request: PostExploitationRequest,
    service: PostExploitationService = Depends(get_service),
) -> PostExploitationResponse:
    """Execute a post-exploitation activity.

    Args:
        request: Post-exploitation request
        service: Post-exploitation service

    Returns:
        Post-exploitation response
    """
    return await service.execute_post_exploitation(request)


@router.post(
    "/auto-cleanup",
    response_model=List[CleanupResult],
    status_code=status.HTTP_200_OK,
    summary="Auto-cleanup pending activities",
    description="Automatically clean up any pending post-exploitation activities.",
)
async def auto_cleanup(
    service: PostExploitationService = Depends(get_service),
) -> List[CleanupResult]:
    """Auto-cleanup pending activities.

    Args:
        service: Post-exploitation service

    Returns:
        List of cleanup results
    """
    return await service.auto_cleanup_pending_activities()


@router.get(
    "/activities/{activity_id}",
    response_model=PostExploitationActivity,
    status_code=status.HTTP_200_OK,
    summary="Get activity by ID",
    description="Get a post-exploitation activity by its ID.",
)
async def get_activity(
    activity_id: str, service: PostExploitationService = Depends(get_service)
) -> PostExploitationActivity:
    """Get an activity by ID.

    Args:
        activity_id: Activity ID
        service: Post-exploitation service

    Returns:
        Activity
    """
    activity = await service.get_activity(activity_id)
    if not activity:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Activity {activity_id} not found",
        )
    return activity


@router.get(
    "/activities/by-target/{target_id}",
    response_model=List[PostExploitationActivity],
    status_code=status.HTTP_200_OK,
    summary="Get activities by target",
    description="Get all post-exploitation activities for a specific target.",
)
async def get_activities_by_target(
    target_id: str,
    activity_type: Optional[PostExploitationType] = Query(
        None, description="Filter by activity type"
    ),
    service: PostExploitationService = Depends(get_service),
) -> List[PostExploitationActivity]:
    """Get all activities for a target.

    Args:
        target_id: Target ID
        activity_type: Optional type filter
        service: Post-exploitation service

    Returns:
        List of activities
    """
    return await service.get_activities_by_target(target_id, activity_type)


@router.get(
    "/results/privilege-escalation/{result_id}",
    response_model=PrivilegeEscalationResult,
    status_code=status.HTTP_200_OK,
    summary="Get privilege escalation result",
    description="Get a privilege escalation result by its ID.",
)
async def get_privilege_escalation_result(
    result_id: str, service: PostExploitationService = Depends(get_service)
) -> PrivilegeEscalationResult:
    """Get a privilege escalation result by ID.

    Args:
        result_id: Result ID
        service: Post-exploitation service

    Returns:
        Result
    """
    result = await service.get_privilege_escalation_result(result_id)
    if not result:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Privilege escalation result {result_id} not found",
        )
    return result


@router.get(
    "/results/lateral-movement/{result_id}",
    response_model=LateralMovementResult,
    status_code=status.HTTP_200_OK,
    summary="Get lateral movement result",
    description="Get a lateral movement result by its ID.",
)
async def get_lateral_movement_result(
    result_id: str, service: PostExploitationService = Depends(get_service)
) -> LateralMovementResult:
    """Get a lateral movement result by ID.

    Args:
        result_id: Result ID
        service: Post-exploitation service

    Returns:
        Result
    """
    result = await service.get_lateral_movement_result(result_id)
    if not result:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Lateral movement result {result_id} not found",
        )
    return result


@router.get(
    "/results/cleanup/{result_id}",
    response_model=CleanupResult,
    status_code=status.HTTP_200_OK,
    summary="Get cleanup result",
    description="Get a cleanup result by its ID.",
)
async def get_cleanup_result(
    result_id: str, service: PostExploitationService = Depends(get_service)
) -> CleanupResult:
    """Get a cleanup result by ID.

    Args:
        result_id: Result ID
        service: Post-exploitation service

    Returns:
        Result
    """
    result = await service.get_cleanup_result(result_id)
    if not result:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail=f"Cleanup result {result_id} not found",
        )
    return result
