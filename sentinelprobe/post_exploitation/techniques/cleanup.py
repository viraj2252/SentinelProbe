"""Cleanup techniques for post-exploitation."""

import asyncio
from typing import Any, Dict, Optional, Union

from sentinelprobe.core.logging import get_logger
from sentinelprobe.exploitation.models import ExploitResult
from sentinelprobe.post_exploitation.models import (
    CleanupResult,
    LateralMovementResult,
    PostExploitationActivity,
    PostExploitationConfig,
    PostExploitationType,
    PrivilegeEscalationResult,
)
from sentinelprobe.post_exploitation.repository import PostExploitationRepository
from sentinelprobe.post_exploitation.service import PostExploitationTechnique
from sentinelprobe.reconnaissance.models import Target

logger = get_logger(__name__)


class CleanupTechnique(PostExploitationTechnique):
    """Cleanup technique for post-exploitation."""

    @property
    def name(self) -> str:
        """Get the name of the technique."""
        return "CleanupTechnique"

    @property
    def description(self) -> str:
        """Get the description of the technique."""
        return "Cleans up artifacts and restores systems after post-exploitation activities."

    @property
    def type(self) -> PostExploitationType:
        """Get the type of post-exploitation activity."""
        return PostExploitationType.CLEANUP

    async def execute(
        self,
        activity: PostExploitationActivity,
        target: Target,
        exploit_result: ExploitResult,
        config: PostExploitationConfig,
        parameters: Dict[str, Any],
    ) -> CleanupResult:
        """Execute the cleanup.

        Args:
            activity: Post-exploitation activity
            target: Target to execute on
            exploit_result: Result of the exploit
            config: Post-exploitation configuration
            parameters: Technique-specific parameters

        Returns:
            Cleanup result
        """
        # In a real implementation, we would actually execute cleanup commands
        # on the target system. For now, we'll simulate the process.

        # Add a slight delay to simulate the execution time
        await asyncio.sleep(0.8)

        # Get previous activity results to determine what needs cleaning
        prev_activity_id = parameters.get("prev_activity_id", "")
        steps_performed = []
        commands_executed = []
        success = True

        if prev_activity_id:
            prev_activity = await self._get_previous_activity(prev_activity_id)
            if prev_activity:
                prev_result = await self._get_previous_result(prev_activity)
                if prev_result and hasattr(prev_result, "cleanup_commands"):
                    commands_executed = prev_result.cleanup_commands

                    # Add steps based on the type of previous activity
                    if prev_activity.type == PostExploitationType.PRIVILEGE_ESCALATION:
                        steps_performed.extend(
                            [
                                "Reverting privilege escalation changes",
                                "Removing temporary files created during privilege escalation",
                                "Restoring original permissions",
                                "Cleaning up command history",
                            ]
                        )
                    elif prev_activity.type == PostExploitationType.LATERAL_MOVEMENT:
                        steps_performed.extend(
                            [
                                "Removing access to lateral movement targets",
                                "Cleaning up connection logs",
                                "Removing transferred files",
                                "Restoring original network configuration",
                            ]
                        )
                    else:
                        steps_performed.append(
                            f"Cleaning up after {prev_activity.type} activity"
                        )

        # If no specific previous activity, perform general cleanup
        if not steps_performed:
            steps_performed = [
                "Removing temporary files",
                "Cleaning up command history",
                "Removing audit log entries",
                "Restoring original system state",
            ]

            # Default cleanup commands
            commands_executed = [
                "rm -f /tmp/exploit_*",
                "history -c",
                "echo > ~/.bash_history",
                "rm -rf ~/.ssh/known_hosts.backup",
            ]

        # Create detailed result message
        details = (
            "Successfully cleaned up post-exploitation artifacts"
            if success
            else "Failed to completely clean up all artifacts"
        )

        # Create and return the result
        result = CleanupResult(
            activity_id=activity.id,
            success=success,
            target_id=str(target.id),
            steps_performed=steps_performed,
            commands_executed=commands_executed,
            details=details,
        )

        return result

    async def _get_previous_activity(
        self, activity_id: str
    ) -> Optional[PostExploitationActivity]:
        """Get a previous activity by ID.

        Args:
            activity_id: Activity ID

        Returns:
            Activity or None if not found
        """
        repository = PostExploitationRepository()
        await repository.initialize()
        return await repository.get_activity(activity_id)

    async def _get_previous_result(
        self, activity: PostExploitationActivity
    ) -> Optional[Union[PrivilegeEscalationResult, LateralMovementResult]]:
        """Get the result of a previous activity.

        Args:
            activity: Previous activity

        Returns:
            Previous result or None if not found
        """
        repository = PostExploitationRepository()
        await repository.initialize()

        results = await repository.get_results_by_activity(activity.id, activity.type)
        if results:
            # Type check to ensure we have the right result type
            result = results[0]
            if isinstance(result, (PrivilegeEscalationResult, LateralMovementResult)):
                return result
            logger.warning(f"Unexpected result type: {type(result)}")

        return None
